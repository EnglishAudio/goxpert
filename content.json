{"meta":{"title":"GoXpert.ru","subtitle":"GoXpert.ru для тех, кто хочет стать экспертом в GO разработке","description":"Секреты Golang. Архитектура и дизайн приложений на GO. Всё о GO изнутри","author":"авторы проекта GoXpert","url":"https://goxpert.ru","root":"/"},"pages":[{"title":"","date":"2021-11-27T21:16:20.121Z","updated":"2021-11-27T21:16:20.076Z","comments":true,"path":"search.html","permalink":"https://goxpert.ru/search.html","excerpt":"","text":"(function(w,d,c){var s=d.createElement('script'),h=d.getElementsByTagName('script')[0];s.type='text/javascript';s.async=true;s.charset='utf-8';s.src=(d.location.protocol==='https:'?'https:':'http:')+'//site.yandex.net/v2.0/js/all.js';h.parentNode.insertBefore(s,h);(w[c]||(w[c]=[])).push(function(){Ya.Site.Results.init();})})(window,document,'yandex_site_callbacks');"}],"posts":[{"title":"Примитивы синхронизации","slug":"сoncurrency/sync-primitives","date":"2024-06-02T13:06:57.891Z","updated":"2024-06-02T13:50:45.587Z","comments":true,"path":"2024/06/02/сoncurrency/sync-primitives/","link":"","permalink":"https://goxpert.ru/2024/06/02/%D1%81oncurrency/sync-primitives/","excerpt":"","text":"Какие примитивы синхронизации есть в Golang?Примитивы синхронизации - это специальные конструкции, которые позволяют координировать и контролировать доступ к общим ресурсам в многопоточных или конкурентных программах. В Golang есть несколько пакетов, которые предоставляют различные примитивы синхронизации, такие как: sync - содержит базовые примитивы, такие как мьютексы (mutexes), блокировки чтения-записи (read-write locks), группы ожидания (wait groups), однократные исполнители (once), условные переменные (condition variables) и другие.sync/atomic - содержит функции для атомарных операций с примитивными типами данных, такими как целые числа, указатели, булевы значения и т.д.context - содержит примитивы для управления жизненным циклом и отменой горутин (goroutines), а также для передачи метаданных между ними.chan - является встроенным типом данных, который представляет собой канал для обмена данными между горутинами, который может быть использован как примитив синхронизации или коммуникации. Источники: Medium Medium Чем мьютекс отличается от семафора?Мьютекс и семафор - это два способа синхронизации доступа к общим ресурсам в многопоточных программах. Они имеют разные преимущества и недостатки, и их выбор зависит от конкретной задачи. Вот некоторые основные различия между мьютексом и семафором: Мьютекс - это объект, который позволяет блокировать и разблокировать доступ к одному ресурсу, тогда как семафор - это переменная, которая позволяет контролировать доступ к нескольким ресурсам.Мьютекс может быть захвачен или освобожден только тем потоком, который его заблокировал, тогда как семафор может быть изменен любым потоком.Мьютекс обычно используется для взаимного исключения, т.е. для предотвращения состояний гонки, тогда как семафор обычно используется для координации, т.е. для синхронизации действий между потоками.Мьютекс имеет только два состояния: заблокирован или разблокирован, тогда как семафор имеет целочисленное значение, которое может быть больше нуля. Источники: Guru99 Что такое atomic и чем отличается от мьютекса?Атомики (atomics) - это функции, которые позволяют выполнять простые операции с общим ресурсом, такие как чтение, запись, инкремент, декремент, обмен или сравнение и присваивание. Атомики гарантируют, что эти операции будут выполнены атомарно, то есть без вмешательства других горутин. Атомики реализованы в пакете sync/atomic, и для их использования нужно вызывать соответствующие функции с указателем на ресурс. Атомики подходят для ситуаций, когда требуется выполнить быстрые и простые операции с ресурсом, такие как увеличение или уменьшение счетчика, установка или сброс флага, или проверка или изменение состояния.Все атомики реализованы через спецальные регистры процессора и в коде го они написаны на ассемблереАтомики являются примитивами низкого уровня реализующими атомарные операции с памятью. Атомики в Go: особенности внутренней реализации В общем, мьютексы и атомики имеют следующие отличия: Мьютексы работают с любыми типами данных, а атомики - только с примитивными типами, такими как int, uint, bool, pointer и т.д. Мьютексы требуют явной блокировки и разблокировки, а атомики - нет. Мьютексы позволяют выполнять любые операции с ресурсом, а атомики - только ограниченный набор операций. Мьютексы могут быть более медленными и затратными, чем атомики, из-за переключения контекста и ожидания блокировки. Мьютексы могут приводить к взаимным блокировкам (deadlocks), если не использовать их правильно, а атомики - нет. Источники: Golangify Metanit Что можно использовать для ожидания выполнения N горутин?Один из способов сделать это - использовать встроенную конструкцию WaitGroup из пакета sync. WaitGroup позволяет организовать синхронизацию между несколькими горутинами, которые выполняют параллельные или конкурентные задачи. WaitGroup имеет счетчик, который увеличивается при добавлении новой горутины и уменьшается при ее завершении. Основная горутина может вызвать метод Wait, который блокирует ее до тех пор, пока счетчик не станет равным нулю, то есть пока все горутины не закончат свою работу. Например, вы можете написать следующий код, который запускает N горутин, каждая из которых печатает свой номер и засыпает на случайное время, а затем ожидает их завершения с помощью WaitGroup: title12345678910111213141516171819202122232425262728293031323334package mainimport ( &quot;fmt&quot; &quot;math/rand&quot; &quot;sync&quot; &quot;time&quot;)const N = 5 // количество горутинfunc main() &#123; var wg sync.WaitGroup // создаем WaitGroup wg.Add(N) // устанавливаем счетчик на N for i := 1; i &lt;= N; i++ &#123; go func(n int) &#123; // запускаем горутину с номером n // при выходе из горутины уменьшаем счетчик на 1 defer wg.Done() fmt.Println(&quot;Горутина&quot;, n, &quot;начала работу&quot;) // засыпаем на случайное время от 0 до 10 секунд time.Sleep(time.Duration(rand.Intn(10)) * time.Second) fmt.Println(&quot;Горутина&quot;, n, &quot;закончила работу&quot;) &#125;(i) &#125; fmt.Println(&quot;Ожидаем завершения горутин&quot;) // блокируем основную горутину, пока счетчик не станет равным нулю wg.Wait() fmt.Println(&quot;Все горутины завершились&quot;)&#125; Есть общий ресурс. Хотим, чтобы к нему одновременно обращались только N горутин. Как это сделать?Один из способов сделать это - использовать семафор (semaphore), который представляет собой переменную, которая хранит количество доступных ресурсов. Семафор может быть реализован с помощью канала (channel) с буфером размера N, который будет заполнен пустыми значениями. Каждая горутина, которая хочет получить доступ к ресурсу, должна сначала получить значение из канала, а затем вернуть его обратно после завершения работы. Таким образом, канал будет выступать в роли блокировки, которая разрешает доступ только N горутинам одновременно. Например, вы можете написать следующий код, который запускает M горутин, каждая из которых печатает свой номер и засыпает на случайное время, а затем ожидает их завершения с помощью семафора: title123456789101112131415161718192021222324252627282930313233343536package mainimport ( &quot;fmt&quot; &quot;math/rand&quot; &quot;time&quot;)const N = 3 // количество доступных ресурсовconst M = 10 // количество горутинfunc main() &#123; sem := make(chan struct&#123;&#125;, N) // создаем канал с буфером размера N for i := 1; i &lt;= N; i++ &#123; sem &lt;- struct&#123;&#125;&#123;&#125; // заполняем канал пустыми значениями &#125; for i := 1; i &lt;= M; i++ &#123; go work(i, sem) // запускаем горутину с номером i и каналом sem &#125; time.Sleep(20 * time.Second) // ждем 20 секунд, пока все горутины закончат работу fmt.Println(&quot;The End&quot;)&#125;func work(number int, sem chan struct&#123;&#125;) &#123; // получаем значение из канала, блокируя доступ к ресурсу &lt;-sem fmt.Println(&quot;Горутина&quot;, number, &quot;начала работу&quot;) // засыпаем на случайное время от 0 до 10 секунд time.Sleep(time.Duration(rand.Intn(10)) * time.Second) fmt.Println(&quot;Горутина&quot;, number, &quot;закончила работу&quot;) // возвращаем значение в канал, разблокируя доступ к ресурсу sem &lt;- struct&#123;&#125;&#123;&#125;&#125; Запустим 1000 горутин с инкрементом инта. Получим в конце тысячу? Что делать, чтобы получить тысячу?Если вы запустите 1000 горутин с инкрементом инта, то скорее всего вы не получите в конце тысячу. Это потому, что инкремент не является атомарной операцией, то есть он состоит из трех шагов: чтения, изменения и записи значения. Если несколько горутин одновременно пытаются выполнить инкремент, то может возникнуть состояние гонки (race condition), когда одна горутина перезаписывает значение, измененное другой горутиной, и тем самым теряет часть инкрементов. Чтобы получить тысячу в конце, нужно синхронизировать доступ к общей переменной, которая хранит инт. Для этого можно использовать один из следующих способов: Использовать мьютекс (mutex) из пакета sync, который позволяет блокировать и разблокировать доступ к переменной. Каждая горутина должна вызвать метод Lock перед инкрементом и метод Unlock после него, чтобы гарантировать, что только одна горутина может работать с переменной в один момент времени. Использовать атомик (atomic) из пакета sync/atomic, который позволяет выполнять атомарные операции с примитивными типами данных. Вместо обычного инкремента можно использовать функцию AddInt32 или AddInt64, которая атомарно увеличивает значение переменной на заданное число и возвращает новое значение. Есть глобальная мапа, глобальный мьютекс. Две функции. Одна блочит мьютекс, а вторая нет. Что произойдет?Если одна функция блокирует мьютекс перед работой с глобальной мапой, а другая нет, то может возникнуть ситуация, когда две функции одновременно пытаются изменить мапу, что может привести к состоянию гонки (race condition) и неопределенному поведению программы. Состояние гонки означает, что результат работы программы зависит от случайного порядка выполнения операций, и может быть непредсказуемым или некорректным. Например, если одна функция пытается добавить элемент в мапу, а другая пытается удалить элемент из мапы, то может случиться, что элемент будет удален до того, как он будет добавлен, или наоборот, или что элемент будет добавлен или удален дважды, или что мапа будет повреждена. Сколько нужно ядер, чтобы начать использовать sync.Map?sync.Map может быть полезен, если у вас высоконагруженная система с большим количеством ядер процессора (32+), и вы сталкиваетесь с проблемой ложной разделяемости (false sharing), когда разные горутины конкурируют за доступ к одному и тому же кеш-линии (cache line). В этом случае sync.Map может снизить количество конфликтов и повысить скорость работы с картой. Однако, если у вас небольшое количество ядер (меньше 8), и вы часто записываете в карту, то sync.Map может быть неэффективнее, чем обычная карта с мьютексом, так как он использует сложную внутреннюю структуру, которая требует дополнительных вычислений и памяти. Таким образом, нет однозначного ответа на вопрос, сколько нужно ядер, чтобы начать использовать sync.Map. Это зависит от конкретной задачи, характера операций с картой, нагрузки на систему и других факторов. Ложная разделяемость - это проблема, которая может возникнуть в многопроцессорных системах,когда разные процессоры или ядра конкурируют за доступ к одному и тому же кеш-линии (cache line), то есть блоку памяти,который загружается в кеш процессора для ускорения работы с данными.Если один процессор изменяет данные в кеш-линии, то другие процессорыдолжны обновить свои копии этой кеш-линии, что приводит к дополнительным задержкам и снижению производительности.Ложная разделяемость может возникать, когда разные процессоры работают с разными данными, которые случайно попадают в одну кеш-линию, или когда разные процессоры работают с одними и теми же данными, но не синхронизируют свой доступ к ним.Ложная разделяемость может быть устранена с помощью различных методов, таких как: Изменение размера или выравнивания структур данных, чтобы избежать перекрытия кеш-линий. Использование атомарных (atomic) операций, которые не требуют блокировки кеш-линии. Использование специальных инструкций, которые позволяют указать процессору, что данные в кеш-линии не будут изменяться. Использование разных уровней кеша для разных типов данных. Источники: Habr Blogspot Как устроена WaitGroup под капотом и как ее можно реализовать самому?Под капотом WaitGroup реализован с помощью атомарных операций, которые обеспечивают потокобезопасность и высокую производительность. WaitGroup использует 64-битное целое число, которое разделено на две части: старшие 32 бита хранят счетчик горутин, а младшие 32 бита хранят счетчик ожидающих горутин. Каждый раз, когда вызывается метод Add, WaitGroup атомарно увеличивает счетчик горутин на заданное значение. Каждый раз, когда вызывается метод Done, WaitGroup атомарно уменьшает счетчик горутин на единицу и проверяет, не стал ли он равным нулю. Если да, то WaitGroup атомарно увеличивает счетчик ожидающих горутин на единицу и разблокирует одну из ожидающих горутин с помощью сигнальной переменной (signal variable). Каждый раз, когда вызывается метод Wait, WaitGroup атомарно уменьшает счетчик ожидающих горутин на единицу и проверяет, не стал ли он отрицательным. Если да, то WaitGroup атомарно возвращает счетчик ожидающих горутин в исходное состояние и блокирует текущую горутину с помощью сигнальной переменной. title1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556package mainimport ( &quot;fmt&quot; &quot;sync&quot; &quot;sync/atomic&quot; &quot;time&quot;)// MyWaitGroup - собственная реализация WaitGrouptype MyWaitGroup struct &#123; counter int64 // счетчик горутин waiter int64 // счетчик ожидающих горутин signal sync.Cond // сигнальная переменная&#125;// Add - добавляет n горутин в группуfunc (wg *MyWaitGroup) Add(n int) &#123; atomic.AddInt64(&amp;wg.counter, int64(n)) // атомарно увеличиваем счетчик горутин на n&#125;// Done - уменьшает счетчик горутин на 1 и разблокирует одну ожидающую горутину, если счетчик стал равным 0func (wg *MyWaitGroup) Done() &#123; if atomic.AddInt64(&amp;wg.counter, -1) == 0 &#123; // атомарно уменьшаем счетчик горутин на 1 и проверяем, не стал ли он равным 0 wg.signal.L.Lock() // блокируем сигнальную переменную atomic.AddInt64(&amp;wg.waiter, 1) // атомарно увеличиваем счетчик ожидающих горутин на 1 wg.signal.Broadcast() // разблокируем все ожидающие горутины wg.signal.L.Unlock() // разблокируем сигнальную переменную &#125;&#125;// Wait - блокирует текущую горутину, пока счетчик горутин не станет равным 0func (wg *MyWaitGroup) Wait() &#123; wg.signal.L.Lock() // блокируем сигнальную переменную if atomic.AddInt64(&amp;wg.waiter, -1) &lt; 0 &#123; // атомарно уменьшаем счетчик ожидающих горутин на 1 и проверяем, не стал ли он отрицательным atomic.StoreInt64(&amp;wg.waiter, 0) // атомарно возвращаем счетчик ожидающих горутин в исходное состояние wg.signal.Wait() // блокируем текущую горутину &#125; wg.signal.L.Unlock() // разблокируем сигнальную переменную&#125;func main() &#123; var wg MyWaitGroup // создаем экземпляр MyWaitGroup wg.Add(2) // добавляем две горутины в группу work := func(id int) &#123; defer wg.Done() // при выходе из горутины вызываем метод Done fmt.Printf(&quot;Горутина %d начала работу\\n&quot;, id) time.Sleep(2 * time.Second) // имитируем работу горутины fmt.Printf(&quot;Горутина %d завершила работу\\n&quot;, id) &#125; // запускаем две горутины go work(1) go work(2) wg.Wait() // ожидаем завершения всех горутин в группе fmt.Println(&quot;Горутины завершились&quot;)&#125; Источники: Habr Metanit Medium В чем разница между Mutex и RWMutex?Mutex и RWMutex в Go оба используются для синхронизации доступа к данным в многопоточной среде, но они работают немного по-разному: Mutex: Mutex предоставляет взаимоисключающую блокировку, которая позволяет только одной горутине в любой момент времени иметь доступ к защищенным данным. Если другая горутина пытается получить доступ к данным, когда Mutex заблокирован, она будет заблокирована до тех пор, пока Mutex не будет разблокирован. RWMutex: RWMutex (Reader-Writer Mutex) предоставляет более гибкую семантику блокировки. RWMutex позволяет множеству горутин получить параллельный доступ для чтения (блокировка чтения), но только одной горутине получить эксклюзивный доступ на запись (блокировка записи).Это означает, что несколько горутин могут одновременно читать данные, но запись данных может производить только одна горутина. Когда нужно использовать Mutex, а когда RWMutex?Использование Mutex: Mutex следует использовать, когда у вас есть данные, которые могут быть изменены одновременно несколькими горутинами. Mutex обеспечивает взаимоисключающую блокировку, что позволяет только одной горутине в любой момент времени иметь доступ к защищенным данным. Использование RWMutex: RWMutex следует использовать, когда у вас есть данные, которые часто читаются, но редко обновляются. RWMutex позволяет множеству горутин получить параллельный доступ для чтения, но только одной горутине получить эксклюзивный доступ на запись.Это может улучшить производительность, если у вас есть данные, которые часто читаются, так как несколько горутин могут одновременно читать данные. Источники: Habr Stackoverflow","categories":[{"name":"Golang","slug":"Golang","permalink":"https://goxpert.ru/categories/Golang/"},{"name":"Старт","slug":"Golang/Старт","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/"},{"name":"Вопрос-Ответ","slug":"Вопрос-Ответ","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/"},{"name":"Примитивы синхронизации","slug":"Вопрос-Ответ/Примитивы-синхронизации","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/%D0%9F%D1%80%D0%B8%D0%BC%D0%B8%D1%82%D0%B8%D0%B2%D1%8B-%D1%81%D0%B8%D0%BD%D1%85%D1%80%D0%BE%D0%BD%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D0%B8/"},{"name":"Примитивы синхронизации","slug":"Golang/Старт/Примитивы-синхронизации","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/%D0%9F%D1%80%D0%B8%D0%BC%D0%B8%D1%82%D0%B8%D0%B2%D1%8B-%D1%81%D0%B8%D0%BD%D1%85%D1%80%D0%BE%D0%BD%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D0%B8/"}],"tags":[{"name":"Golang, Q&A","slug":"Golang-Q-A","permalink":"https://goxpert.ru/tags/Golang-Q-A/"}]},{"title":"Типы данных","slug":"types/types-common","date":"2024-06-01T07:14:00.000Z","updated":"2024-06-02T11:10:01.396Z","comments":true,"path":"2024/06/01/types/types-common/","link":"","permalink":"https://goxpert.ru/2024/06/01/types/types-common/","excerpt":"","text":"Что такое type switch? Type switch в Go - это способ проверить, какого типа является значение, хранящееся в интерфейсе. Это похоже на обычный switch, но вместо значений в кейсах указываются типы. 1234567891011121314151617181920package mainimport &quot;fmt&quot;func do(i interface&#123;&#125;) &#123; switch v := i.(type) &#123; case int: fmt.Printf(&quot;Twice %v is %v\\n&quot;, v, v*2) case string: fmt.Printf(&quot;%q is %v bytes long\\n&quot;, v, len(v)) default: fmt.Printf(&quot;I don&#x27;t know about type %T!\\n&quot;, v) &#125;&#125;func main() &#123; do(21) do(&quot;hello&quot;) do(true)&#125; Какие типы данных есть в Golang? Целочисленные типы: int8, int16, int32, int64, uint8, uint16, uint32, uint64, byte (синоним для uint8), rune (синоним для int32), int и uint. Числа с плавающей точкой: float32 и float64. Строки: string. Булев тип: bool. Составные типы: Массивы, срезы, структуры, ассоциативные массивы Какой длины руна?rune - это алиас для int32. Это означает, что rune занимает 4 байта или 32 бита. Каждая rune представляет собой один Юникод символ. Например, строка может быть преобразована в срез rune ([]rune), и каждый элемент этого среза будет представлять собой один Юникод символ. Как реализовать Enum в Golang?В Go нет встроенной поддержки перечислений (enum), но их можно эмулировать с помощью констант. Вот пример реализации enum в Go: title123456789101112131415161718192021package mainimport &quot;fmt&quot;type Season intconst ( Summer Season = iota Autumn Winter Spring)func (s Season) String() string &#123; return [...]string&#123;&quot;Лето&quot;, &quot;Осень&quot;, &quot;Зима&quot;, &quot;Весна&quot;&#125;[s]&#125;func main() &#123; s := Winter fmt.Println(s)&#125; Что если во время компиляции переполним тип? В int8 запишем 256?Если вы попытаетесь записать значение, превышающее максимально допустимое для данного типа, в Go, то произойдет переполнение типа. Например, int8 может хранить значения от -128 до 127. Если вы попытаетесь записать 256 в переменную типа int8, то произойдет переполнение. В результате, вместо 256 будет записано значение, которое соответствует остатку от деления 256 на 256 (количество возможных значений для int8), то есть 01. Важно отметить, что такое поведение может привести к неожиданным результатам, поэтому всегда следует убедиться, что значения, которые вы записываете в переменные, не превышают максимально допустимые для их типа Что происходит при переполнении числа, например в uint8 выйдем за границу на 1?Если вы попытаетесь записать значение, превышающее максимально допустимое для данного типа, в Go, то произойдет переполнение типа. Например, uint8 может хранить значения от 0 до 255. Если вы попытаетесь записать 256 в переменную типа uint8, то произойдет переполнение. В результате, вместо 256 будет записано значение, которое соответствует остатку от деления 256 на 256 (количество возможных значений для uint8), то есть 0. Важно отметить, что такое поведение может привести к неожиданным результатам, поэтому всегда следует убедиться, что значения, которые вы записываете в переменные, не превышают максимально допустимые для их типа.","categories":[{"name":"Golang","slug":"Golang","permalink":"https://goxpert.ru/categories/Golang/"},{"name":"Старт","slug":"Golang/Старт","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/"},{"name":"Вопрос-Ответ","slug":"Вопрос-Ответ","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/"},{"name":"Типы","slug":"Вопрос-Ответ/Типы","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/%D0%A2%D0%B8%D0%BF%D1%8B/"},{"name":"Типы","slug":"Golang/Старт/Типы","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/%D0%A2%D0%B8%D0%BF%D1%8B/"}],"tags":[{"name":"Golang, Q&A","slug":"Golang-Q-A","permalink":"https://goxpert.ru/tags/Golang-Q-A/"}]},{"title":"Хеш-мапы (map)","slug":"types/map","date":"2024-06-01T07:13:00.000Z","updated":"2024-06-02T10:55:48.970Z","comments":true,"path":"2024/06/01/types/map/","link":"","permalink":"https://goxpert.ru/2024/06/01/types/map/","excerpt":"","text":"Что такое мапа (map)??Мапа в Go - это тип данных, который предназначен для хранения пар “ключ-значение”. Это структура данных, также известная как хэш-таблица, словарь или ассоциативный массив. Мапа позволяет получить значение по ключу. Ключами в мапе могут быть любые сравниваемые типы — все сравнимые типы. title12345678910package mainimport &quot;fmt&quot;func main() &#123; m := make(map[string]int) m[&quot;apple&quot;] = 1 m[&quot;banana&quot;] = 2 fmt.Println(m)&#125; Что произойдет при конкурентной записи в мапу?Мапы в Go не являются потокобезопасными. Это означает, что если вы попытаетесь записать данные в мапу из нескольких горутин одновременно, это может привести к состоянию гонки. Если вам нужно работать с мапой из нескольких горутин, вы должны использовать механизмы синхронизации, такие как sync.Mutex или sync.RWMutex, чтобы гарантировать, что в любой момент времени только одна горутина может изменять мапу. Вот пример использования sync.Mutex для безопасной записи в мапу из нескольких горутин: title12345678910111213141516171819202122232425package mainimport ( &quot;fmt&quot; &quot;sync&quot;)func main() &#123; var wg sync.WaitGroup var mu sync.Mutex m := make(map[int]int) for i := 0; i &lt; 10; i++ &#123; wg.Add(1) go func(i int) &#123; defer wg.Done() mu.Lock() m[i] = i * 2 mu.Unlock() &#125;(i) &#125; wg.Wait() fmt.Println(m)&#125; Как устроена мапа под капотом?Мапа в Go - это структура данных, которая хранит пары “ключ-значение”. Внутри мапы ключи и значения хранятся в выделенном участке памяти, последовательно. Для получения адресов ячеек конкретных ключей и значений используется хэширующая функция. Вот некоторые детали о том, как устроена мапа в Go: Мапа разбивается на бакеты для более эффективного поиска. Хэш-функция используется для равномерного распределения ключей по бакетам. При переполнении бакета происходит рост мапы. Эвакуация данных происходит при заполнении мапы. Порядок обхода мапы является случайным. Какие ключи могут быть у мапы?Ключами в мапе могут быть любые сравниваемые типы — все простые скалярные типы, массивы. Несравниваемые типы — срезы, мапы, функции. Ключи и значения мапы будут храниться в выделенном участке памяти, последовательно. Какая сложность работы с мапой?Операции вставки, удаления и поиска в мапе в Go обычно имеют сложность O(1), то есть они выполняются за постоянное время. Это достигается за счет использования хэш-таблицы внутри мапы. Однако в худшем случае, когда все ключи попадают в один и тот же бакет, эти операции могут иметь сложность O(n), где n - количество элементов в мапе Можно ли взять адрес элемента мапы и почему?Нет, нельзя взять адрес элемента мапы в Go. Это связано с тем, как устроена мапа внутри. Мапа разбита на бакеты, и при росте мапы элементы могут переходить из одного бакета в другой. Это означает, что адрес элемента в памяти может меняться, и поэтому Go не позволяет взять адрес элемента мапы. Если вы попытаетесь это сделать, компилятор выдаст ошибку. Как работает эвакуация данных?Эвакуация данных в мапе Go происходит при переполнении мапы. Когда количество элементов в мапе достигает определенного порога, мапа “растет” - создается новая, большая мапа, и все элементы из старой мапы копируются в новую. Этот процесс называется “эвакуацией”. Важно отметить, что в Go рост мапы происходит асинхронно. Это означает, что во время роста мапы могут возникать ситуации, когда при попытке доступа к данным часть бакетов уже переехала в новую мапу, а часть еще нет. Благодаря этому не происходит просадок во время роста большой мапы. Как разрешаются коллизии в мапе?В мапе Go коллизии разрешаются с помощью бакетов. Каждый бакет может содержать до восьми элементов. Если все ячейки в бакете заняты, то происходит переполнение и мапа “растет” - создается новая, большая мапа, и все элементы из старой мапы копируются в новую. Этот процесс называется “эвакуацией”. При этом, благодаря использованию хэш-функции, ключи равномерно распределяются по бакетам. Это позволяет минимизировать количество коллизий и обеспечивает быстрый доступ к данным. В функции make для мапы мы указываем число. Что оно дает?Число, указываемое в функции make для мапы в Go, определяет начальную вместимость мапы. Это число элементов, которые мапа сможет хранить без необходимости расширения. Если вы заранее знаете, сколько элементов будет в мапе, вы можете использовать это число при создании мапы, чтобы уменьшить количество операций реаллокации памяти, что может улучшить производительность. Вот пример создания мапы с начальной вместимостью 10: title1m := make(map[string]int, 10) Стало слишком много коллизий в мапе, как решить проблему?Если в мапе Go стало слишком много коллизий, вы можете использовать следующие подходы для решения проблемы: Изменить размер мапы: Если мапа слишком мала, она может быстро заполняться, что приводит к большому количеству коллизий. В этом случае вы можете увеличить размер мапы, чтобы уменьшить вероятность коллизий. Использовать метод раздельного связывания: Это метод, при котором внутри хеш-таблицы хранится массив фиксированного размера, элементы которого - связанные списки. По хешу ключа определяется элемент массива (bucket - корзину) и потом смотрится в списке, нет ли такого элемента и действуется соответствующее (добавляется/удаляется/модифицируется). Чем мапа отличается от sync.Map?sync.Map и обычная мапа в Go имеют различия в использовании и производительности Потокобезопасность: Обычная мапа в Go не является потокобезопасной, что означает, что одновременная запись в мапу из нескольких горутин может привести к состоянию гонки. В то время как sync.Map разработана для использования в многопоточных ситуациях и обеспечивает потокобезопасность. Производительность sync.Map обычно близка по скорости к обычной мапе с sync.RWMutex, но может быть лучше в случае чтения. Когда происходит чтение и обновление, sync.Map будет иметь элементы и в чтении, и в “грязном” состоянии. Использование sync.Map - это структура с методами, предоставляющими обычные операции с мапой. Вы не можете использовать синтаксис a_map[&quot;key&quot;] с sync.Map, вместо этого нужно использовать методы, такие как Load, Store и Delete. Структура sync.Map - это сложная структура, обычно состоящая из двух мап - одной для чтения и одной для новых элементов. Важно отметить, что sync.Map следует использовать только в тех случаях, когда большинство операций с мапой - это чтение, и когда ключи мапы меняются динамически. Какая функция используется при хешировании ключа в мапе?При хешировании ключа в мапе golang используется функция runtime.mapaccess1_faststr, которая принимает тип мапы, саму мапу и ключ в виде строки. Функция ищет ключ в мапе и возвращает указатель на соответствующее значение. Функция runtime.mapaccess1_faststr является специализированной версией функции runtime.mapaccess1, которая работает с любым типом ключа. Хеширование ключа в мапе golang основано на алгоритме MurmurHash, который быстро и равномерно распределяет ключи по хеш-таблице. Хеш-таблица в golang состоит из массива корзин (buckets), каждая из которых содержит до восьми пар ключ-значение. Кроме того, каждая корзина имеет указатель на переполненную корзину, которая создается при коллизии хешей. Если вы хотите узнать больше о реализации мапы в golang, вы можете почитать эту статью или эту статью на Хабре. Они объясняют детали работы мапы в golang с примерами кода и иллюстрациями. 😊 Источники: Habr Habr GolangForAll title1234567891011121314151617181920package mainimport &quot;fmt&quot;type Vertex struct &#123; Lat, Long float64&#125;var m map[string]Vertexfunc main() &#123; m = make(map[string]Vertex) // иначе паника m[&quot;Bell Labs&quot;] = Vertex&#123;40.68433, -74.39967,&#125; m[&quot;A2&quot;] = Vertex&#123;42, -24,&#125; fmt.Println(m) // реализовано так, что детерменированный вывод for _, val := range m &#123; // произвольный обход fmt.Println(val) &#125;&#125; Хорошая статья Pro Map","categories":[{"name":"Golang","slug":"Golang","permalink":"https://goxpert.ru/categories/Golang/"},{"name":"Старт","slug":"Golang/Старт","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/"},{"name":"Вопрос-Ответ","slug":"Вопрос-Ответ","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/"},{"name":"Хеш-мапы","slug":"Вопрос-Ответ/Хеш-мапы","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/%D0%A5%D0%B5%D1%88-%D0%BC%D0%B0%D0%BF%D1%8B/"},{"name":"Хеш-мапы","slug":"Golang/Старт/Хеш-мапы","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/%D0%A5%D0%B5%D1%88-%D0%BC%D0%B0%D0%BF%D1%8B/"}],"tags":[{"name":"Golang, Q&A","slug":"Golang-Q-A","permalink":"https://goxpert.ru/tags/Golang-Q-A/"}]},{"title":"Интерфейсы","slug":"types/interface","date":"2024-06-01T07:12:00.000Z","updated":"2024-06-02T09:51:46.105Z","comments":true,"path":"2024/06/01/types/interface/","link":"","permalink":"https://goxpert.ru/2024/06/01/types/interface/","excerpt":"","text":"Что такое интерфейс (interface)?Интерфейс в golang - это тип, который определяет набор сигнатур методов. Интерфейс позволяет абстрагироваться от конкретной реализации и работать с разными типами данных, которые реализуют один и тот же интерфейс. Например, интерфейс Printer определяет метод Print(), который может быть реализован разными структурами, такими как User или Document. Для того, чтобы тип реализовывал интерфейс, он должен предоставить определения всех методов интерфейса. В Go реализация интерфейса происходит неявно, то есть не требуется указывать, что тип реализует интерфейса. Для чего используется интерфейс?Интерфейс в golang используется для определения набора методов, которые должен реализовывать какой-либо тип данных. Интерфейсы позволяют абстрагироваться от конкретных реализаций и работать с разными типами, имеющими общее поведение. Интерфейсы также способствуют модульности, гибкости и переиспользованию кода. Например, интерфейс fmt.Stringer определяет метод String(), который возвращает строковое представление любого типа, реализующего этот интерфейс. Как в строго типизированным языке сделать функцию, которая работает с разными типами?Один из способов сделать это - использовать обобщения (generics), которые появились в Go 1.18. Обобщения позволяют объявлять и использовать функции или типы, которые написаны для работы с любым из набора типов, предоставляемых вызывающим кодом. Для этого в Go введены три новых элемента языка: Параметры типов для функций и типов. Это означает, что вы можете задать переменную типа T, которая может принимать разные конкретные типы при вызове функции или создании типа. Определение интерфейсных типов как множеств типов, включая типы, не имеющие методов. Это означает, что вы можете задать ограничение (constraint) на параметр типа, указав, какие свойства должен иметь тип, чтобы его можно было использовать в обобщенной функции или типе. Вывод типов, который позволяет опускать аргументы типов во многих случаях при вызове функции. Это означает, что вы можете не указывать конкретный тип при вызове обобщенной функции, если компилятор может сам его определить из контекста. Есть интерфейс, а есть указатель на структуру, который nil. Кладем указатель в интерфейс. Что если сравнить интерфейс с nil?Интерфейс в Go является типом, который может хранить любые типы, удовлетворяющие ему. Интерфейс, в котором лежит указатель на структуру, и nil интерфейс сравнимы между собой. Если вы сравните интерфейс, в котором лежит указатель на структуру, с nil, результат будет “false”, потому что интерфейс не пустой. Однако, если вы сравните интерфейс с интерфейсом, содержащим nil указатель, результат будет “false”. title12345678910111213141516type SomeInterface interface &#123; SomeMethod()&#125;type SomeStruct struct&#123;&#125;func (s *SomeStruct) SomeMethod() &#123;&#125;func main() &#123; var s SomeStruct var i1 SomeInterface = &amp;s var i2 SomeInterface fmt.Println(i1 == nil) // false fmt.Println(i2 == nil) // true&#125; В примере выше мы создаем интерфейс SomeInterface с методом SomeMethod. Внутри интерфейса i1 лежит указатель на структуру SomeStruct, а интерфейс i2 является пустым интерфейсом. Сравнивая i1 с nil, мы получаем “false”, так как интерфейс i1 не пустой. Сравнивая i2 с nil, мы получаем “true”, так как интерфейс i2 является пустым интерфейсом. Чем any отличается от пустого интерфейса?Пустой интерфейс в Go (nil интерфейс) не хранит значение. Если интерфейс пустой, то его сравнение с nil будет всегда возвращать true. Тип any (тоже известный как интерфейс interface&#123;&#125;) в Go - это специальный тип интерфейса, который может хранить значение любого типа. Тип any является универсальным типом и может быть использован, когда нужно написать обобщенный код, который будет работать с различными типами. title1234567func main() &#123; var i1 interface&#123;&#125; var i2 interface&#123;&#125; = (*SomeStruct)(nil) fmt.Println(i1 == nil) // true fmt.Println(i2 == nil) // false&#125; Чем пустой интерфейс отличается от пустой структуры?Пустой интерфейс (interface{}) и пустая структура (struct{}) являются двумя различными понятиями в Go. Пустая структура (struct{}) не содержит никаких полей и не реализует никаких методов. Она используется в основном для создания переменных, которые не содержат никаких данных. Например: title1var emptyStruct struct&#123;&#125; Пустой интерфейс (interface{}), с другой стороны, может указывать на любое значение любого типа. Он не имеет никаких методов и не содержит никаких данных. Он используется в основном для передачи значений различных типов в функции или методы. Например: title1234var emptyInterface interface&#123;&#125;emptyInterface = 10emptyInterface = &quot;hello&quot;emptyInterface = struct&#123;&#125;&#123;&#125; Таким образом, основное отличие заключается в том, что пустая структура не может указывать на значения различных типов, в то время как пустой интерфейс может. title123456789101112131415161718192021222324252627282930313233343536373839package mainimport ( &quot;fmt&quot; &quot;math&quot;)type Abser interface &#123; Abs() float64&#125;func main() &#123; var a Abser f := MyFloat(-math.Sqrt2) v := Vertex&#123;3, 4&#125; a = f // a MyFloat implements Abser a = &amp;v // a *Vertex implements Abser реализует интерфейс a = v // Ошибка! v - это Vertex (а не *Vertex) и НЕ реализует интерфейс fmt.Println(a.Abs())&#125;type MyFloat float64func (f MyFloat) Abs() float64 &#123; if f &lt; 0 &#123; return float64(-f) &#125; return float64(f)&#125;type Vertex struct &#123; X, Y float64&#125;func (v *Vertex) Abs() float64 &#123; return math.Sqrt(v.X*v.X + v.Y*v.Y)&#125;","categories":[{"name":"Golang","slug":"Golang","permalink":"https://goxpert.ru/categories/Golang/"},{"name":"Старт","slug":"Golang/Старт","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/"},{"name":"Вопрос-Ответ","slug":"Вопрос-Ответ","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/"},{"name":"Интерфейсы","slug":"Вопрос-Ответ/Интерфейсы","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/%D0%98%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81%D1%8B/"},{"name":"Интерфейсы","slug":"Golang/Старт/Интерфейсы","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/%D0%98%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81%D1%8B/"}],"tags":[{"name":"Golang, Q&A","slug":"Golang-Q-A","permalink":"https://goxpert.ru/tags/Golang-Q-A/"}]},{"title":"Указатели","slug":"types/pointers","date":"2024-06-01T07:11:00.000Z","updated":"2024-06-02T09:11:50.145Z","comments":true,"path":"2024/06/01/types/pointers/","link":"","permalink":"https://goxpert.ru/2024/06/01/types/pointers/","excerpt":"","text":"Что такое указатель (pointer)?Указатель в программировании - это переменная, которая хранит адрес другой переменной в памяти. В Go, указатели используются для того, чтобы иметь возможность изменять значение переменной напрямую или для оптимизации производительности при работе с большими структурами данных. Вы можете получить адрес переменной с помощью оператора &amp;, а затем этот адрес можно сохранить в указателе. Для доступа к значению, на которое указывает указатель, используется оператор *. Вот пример: 1234567891011package mainimport &quot;fmt&quot;func main() &#123; var x int = 10 var p *int p = &amp;x // Получаем адрес переменной x и сохраняем его в p fmt.Println(*p) // Выводим значение переменной, на которую указывает p&#125; В этом примере p является указателем на x, и *p дает нам доступ к значению x. Что такое ссылка на значение?В Go, ссылка на значение обычно означает использование указателей. Указатель - это переменная, которая хранит адрес другой переменной. Вы можете получить адрес переменной с помощью оператора &amp;, а затем этот адрес можно сохранить в указателе. Для доступа к значению, на которое указывает указатель, используется оператор *. Вот пример: 1234567891011package mainimport &quot;fmt&quot;func main() &#123; var x int = 10 var p *int p = &amp;x // Получаем адрес переменной x и сохраняем его в p fmt.Println(*p) // Выводим значение переменной, на которую указывает p&#125; В этом примере p является указателем на x, и *p дает нам доступ к значению x. Чем отличается ссылка от указателя?В Go, термины “ссылка” и “указатель” часто используются взаимозаменяемо, но они имеют некоторые различия. Указатель - это переменная, которая хранит адрес другой переменной. Указатели могут быть нулевыми, что означает, что они не указывают ни на одну переменную. Ссылка - это альтернативное имя для уже существующей переменной. В Go, ссылки как таковые не существуют, но аналогом являются указатели. Основное различие между ними заключается в том, что указатели могут быть переназначены для указания на разные переменные во время выполнения, в то время как ссылки, как правило, не могут быть изменены после их инициализации (хотя в Go это не применимо, так как нет ссылок в традиционном понимании этого термина). Чем чревато передавать структуру по ссылке?Передача структуры по ссылке в Go означает передачу указателя на структуру. Это может иметь следующие последствия: Изменение оригинальной структуры: Поскольку вы передаете указатель, любые изменения, которые вы вносите в структуру внутри функции, будут отражаться на оригинальной структуре. Это может быть как полезным, так и опасным, в зависимости от того, ожидаете ли вы эти изменения. Производительность: Передача структуры по ссылке обычно быстрее, чем передача по значению, особенно для больших структур, поскольку не требуется копирование всей структуры. Nullability: Указатели могут быть nil, в то время как структуры - нет. Это значит, что если вы передаете структуру по ссылке, вам нужно быть уверенным, что она не nil, прежде чем обращаться к ее полям, иначе вы получите панику во время выполнения. В общем, передача структуры по ссылке может быть полезной для оптимизации производительности и для изменения оригинальной структуры, но требует более внимательного обращения, чтобы избежать ошибок во время выполнения. Для чего используются указатели?Указатели в Go используются по нескольким причинам: Изменение значения в функции: Если вы хотите, чтобы функция изменяла значение переменной, вы можете передать указатель на эту переменную в функцию. Это позволяет функции напрямую изменять значение переменной, а не ее копию. Оптимизация производительности: Для больших структур данных передача указателей может быть более эффективной, чем передача значений, поскольку передача значений включает в себя копирование всей структуры данных. Работа с динамическими структурами данных: Указатели необходимы для создания сложных структур данных, таких как связанные списки, деревья, графы и т.д. Интерфейсы и полиморфизм: Указатели используются для реализации интерфейсов и полиморфизма. Если методы определены для указателя на тип, то только указатели этого типа могут использоваться для вызова этих методов. Вот пример использования указателей для изменения значения в функции: 12345678910111213package mainimport &quot;fmt&quot;func increment(x *int) &#123; *x = *x + 1&#125;func main() &#123; var x int = 1 increment(&amp;x) fmt.Println(x) // Выводит 2&#125; В этом примере функция increment принимает указатель на int и увеличивает значение, на которое указывает этот указатель. Для чего в практике используешь указатели?В практическом программировании на Go указатели используются в следующих ситуациях: Изменение значения переменной в функции: Если вы хотите изменить значение переменной внутри функции, вы передаете указатель на эту переменную в функцию. Это позволяет функции напрямую изменять значение переменной, а не ее копию. Оптимизация производительности: Для больших структур данных передача указателей может быть более эффективной, чем передача значений, поскольку передача значений включает в себя копирование всей структуры данных. Работа с динамическими структурами данных: Указатели необходимы для создания сложных структур данных, таких как связанные списки, деревья, графы и т.д. Интерфейсы и полиморфизм: Указатели используются для реализации интерфейсов и полиморфизма. Если методы определены для указателя на тип, то только указатели этого типа могут использоваться для вызова этих методов. Опциональные поля в структурах: В Go, указатели могут быть nil, что позволяет им использоваться для представления опциональных полей в структурах. Работа с внешними ресурсами: Указатели часто используются при работе с внешними ресурсами, такими как файлы или сетевые соединения. Это позволяет функциям и методам изменять состояние этих ресурсов. Какие есть средства для работы с указателями?В Go есть несколько ключевых средств для работы с указателями: Оператор &amp;: Этот оператор используется для получения адреса переменной. Например, если x - это переменная, то &amp;x - это адрес этой переменной. Оператор *: Этот оператор используется для доступа к значению, на которое указывает указатель. Например, если p - это указатель на int, то *p - это int, на который указывает p. Функция new: Эта функция создает новую переменную заданного типа, инициализирует ее нулем и возвращает указатель на нее. Вот пример использования этих средств: 123456789101112package mainimport &quot;fmt&quot;func main() &#123; x := 1 p := &amp;x // Получаем адрес переменной x fmt.Println(*p) // Выводим значение, на которое указывает p y := new(int) // Создаем новую переменную типа int и получаем указатель на нее fmt.Println(*y) // Выводит 0, так как новые переменные инициализируются нулем&#125; В этом примере p - это указатель на x, и *p дает нам доступ к значению x. y - это указатель на новую переменную int, инициализированную нулем. Когда лучше использовать/не использовать указатели?Указатели в Go могут быть полезными, но их использование зависит от конкретной ситуации. Вот несколько рекомендаций: Используйте указатели, когда: Вы хотите изменить значение переменной внутри функции. Если вы передаете переменную по значению, функция получит копию этой переменной, и любые изменения, которые вы внесете, не повлияют на исходную переменную. Если вы передаете переменную по ссылке (т.е. передаете указатель на нее), функция сможет изменить исходную переменную. Вы работаете с большими структурами данных. Передача больших структур данных по значению может быть накладной с точки зрения производительности, поскольку это требует копирования всей структуры. Передача указателя на структуру вместо этого может быть более эффективной. Вы хотите иметь возможность присвоить переменной значение nil. В Go, только указатели могут иметь значение nil. Избегайте использования указателей, когда: Вы работаете с небольшими структурами данных или простыми типами. Для небольших структур данных или простых типов, таких как int или bool, передача по значению обычно быстрее и безопаснее. Вы не хотите, чтобы функция изменяла исходную переменную. Если вы передаете переменную по значению, функция не сможет изменить исходную переменную, что может быть полезно для предотвращения неожиданных побочных эффектов. Вы хотите избежать ошибок во время выполнения, связанных с nil. Если вы используете указатель, вам нужно быть уверенным, что он не nil, прежде чем обращаться к его значению, иначе вы получите панику во время выполнения.","categories":[{"name":"Golang","slug":"Golang","permalink":"https://goxpert.ru/categories/Golang/"},{"name":"Старт","slug":"Golang/Старт","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/"},{"name":"Вопрос-Ответ","slug":"Вопрос-Ответ","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/"},{"name":"Указатели","slug":"Вопрос-Ответ/Указатели","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/%D0%A3%D0%BA%D0%B0%D0%B7%D0%B0%D1%82%D0%B5%D0%BB%D0%B8/"},{"name":"Указатели","slug":"Golang/Старт/Указатели","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/%D0%A3%D0%BA%D0%B0%D0%B7%D0%B0%D1%82%D0%B5%D0%BB%D0%B8/"}],"tags":[{"name":"Golang, Q&A","slug":"Golang-Q-A","permalink":"https://goxpert.ru/tags/Golang-Q-A/"}]},{"title":"Структуры","slug":"types/structs","date":"2024-06-01T07:10:00.000Z","updated":"2024-06-01T18:44:23.938Z","comments":true,"path":"2024/06/01/types/structs/","link":"","permalink":"https://goxpert.ru/2024/06/01/types/structs/","excerpt":"","text":"Имеет ли значение порядок полей в структуре?Да, порядок полей в структуре Go может иметь значение в некоторых случаях. Выравнивание памяти: Go размещает поля структур в соответствии с гарантиями выравнивания для типов полей. Это может влиять на общий размер структуры и использование памяти. Источники: Stackoverflow От чего зависит размер выравнивания в структуре?Размер выравнивания в структуре в Go зависит от нескольких факторов: Тип данных: Размер выравнивания обычно зависит от типа данных. Например, int32 требует выравнивания по 4 байтам. Порядок полей: Порядок полей в структуре может влиять на размер выравнивания. Если поля структуры переставить, размер структуры может измениться. Архитектура системы: Размер выравнивания также может зависеть от архитектуры системы. Например, на 32-битной архитектуре структуры выравниваются под 4 байта. Важно отметить, что выравнивание влияет на производительность и использование памяти, поэтому его следует учитывать при проектировании структур.","categories":[{"name":"Golang","slug":"Golang","permalink":"https://goxpert.ru/categories/Golang/"},{"name":"Старт","slug":"Golang/Старт","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/"},{"name":"Вопрос-Ответ","slug":"Вопрос-Ответ","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/"},{"name":"Структуры","slug":"Вопрос-Ответ/Структуры","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/%D0%A1%D1%82%D1%80%D1%83%D0%BA%D1%82%D1%83%D1%80%D1%8B/"},{"name":"Структуры","slug":"Golang/Старт/Структуры","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/%D0%A1%D1%82%D1%80%D1%83%D0%BA%D1%82%D1%83%D1%80%D1%8B/"}],"tags":[{"name":"Golang, Q&A","slug":"Golang-Q-A","permalink":"https://goxpert.ru/tags/Golang-Q-A/"}]},{"title":"Строки","slug":"types/strings","date":"2024-06-01T07:09:00.000Z","updated":"2024-06-01T18:10:34.586Z","comments":true,"path":"2024/06/01/types/strings/","link":"","permalink":"https://goxpert.ru/2024/06/01/types/strings/","excerpt":"","text":"Что такое string или строки?Строка в golang - это последовательность символов, которая представляет собой текстовые данные.Строки в golang объявляются с типом string и заключаются в двойные кавычки, например: 123var s string = &quot;hello&quot;// или сокращенная записьs := &quot;hey&quot; Строки в golang являются неизменяемыми, то есть их нельзя модифицировать после создания. Однако, можно создавать новые строки из существующих, используя различные операции и функции. Например, можно склеивать строки с помощью оператора +, сравнивать строки с помощью оператора ==, или применять функции из пакета strings для поиска, замены, преобразования и других манипуляций со строками. Строки в golang хранят символы в кодировке UTF-8, которая поддерживает множество языков и специальных символов. Каждый символ в строке называется руной (rune), которая является псевдонимом для типа int32. Руны можно получать из строк с помощью цикла for-range или функции range, а также преобразовывать в строки с помощью функции string. Источники: Programiz DigitalOcean Какие особенности есть у string?Строка в golang - это неизменяемая последовательность символов в кодировке UTF-8, которая представляет собой текстовые данные. Строки в golang имеют тип string и заключаются в двойные кавычки или обратные апострофы. Строки в golang поддерживают множество языков и специальных символов, включая русские буквы и эмодзи. Строки в golang можно объединять, сравнивать, искать, заменять, преобразовывать и выполнять другие манипуляции с помощью различных функций из пакета strings. Строки в golang также можно преобразовывать в руны (кодовые значения символов) и байты (единицы хранения данных) для более низкоуровневой работы с текстом Golangify Как устроена строка внутри, а точнее reflect.String и reflect.StringHeader?reflect.String - это псевдоним для типа string, который является неизменяемой последовательностью символов в кодировке UTF-8. reflect.StringHeader - это структура, которая содержит два поля: Data и Len. Data - это указатель на первый байт строки, а Len - это длина строки в байтах. Структура reflect.StringHeader может быть получена из строки с помощью функции unsafe.Pointer, которая преобразует любое значение в указатель безопасного типа. Например, можно использовать такой код: 123s := &quot;hello&quot;sh := (*reflect.StringHeader)(unsafe.Pointer(&amp;s))fmt.Println(sh.Data, sh.Len) // выводит адрес и длину строки Структура reflect.StringHeader может быть также использована для создания новой строки из существующей, изменяя ее указатель или длину. Например, можно использовать такой код: 12345s := &quot;hello, world!&quot;sh := (*reflect.StringHeader)(unsafe.Pointer(&amp;s))sh.Data += 7 // сдвигаем указатель на 7 байтовsh.Len -= 7 // уменьшаем длину на 7 байтовfmt.Println(s) // выводит &quot;world!&quot; Однако, такое использование reflect.StringHeader может быть опасным, так как оно нарушает неизменяемость строк и может привести к непредвиденным ошибкам или поведению. Например, если мы изменим длину строки больше, чем ее емкость, то мы можем получить доступ к памяти, которая не принадлежит строке, и вызвать панику или нарушение сегментации. Также, если мы изменим указатель на данные, то мы можем потерять ссылку на оригинальную строку и вызвать утечку памяти или сборку мусора. Поэтому, reflect.String и reflect.StringHeader следует использовать с осторожностью и только в тех случаях, когда это необходимо для решения конкретной задачи. В большинстве случаев, можно обойтись стандартными функциями и методами для работы со строками в golang.","categories":[{"name":"Golang","slug":"Golang","permalink":"https://goxpert.ru/categories/Golang/"},{"name":"Старт","slug":"Golang/Старт","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/"},{"name":"Вопрос-Ответ","slug":"Вопрос-Ответ","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/"},{"name":"Строки","slug":"Вопрос-Ответ/Строки","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/%D0%A1%D1%82%D1%80%D0%BE%D0%BA%D0%B8/"},{"name":"Строки","slug":"Golang/Старт/Строки","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/%D0%A1%D1%82%D1%80%D0%BE%D0%BA%D0%B8/"}],"tags":[{"name":"Golang, Q&A","slug":"Golang-Q-A","permalink":"https://goxpert.ru/tags/Golang-Q-A/"}]},{"title":"Массивы и слайсы","slug":"types/array-slice","date":"2024-06-01T07:08:00.000Z","updated":"2024-06-01T17:43:41.332Z","comments":true,"path":"2024/06/01/types/array-slice/","link":"","permalink":"https://goxpert.ru/2024/06/01/types/array-slice/","excerpt":"","text":"Что такое слайс?Слайс в golang - это динамический массив, который может хранить элементы одного типа. Слайс имеет нефиксированную длину, которая может изменяться в процессе работы с ним. Слайс также имеет вместимость, которая определяет, сколько элементов может поместиться в слайс без выделения новой памяти. Слайс можно создавать из массивов, с помощью функции make или литералов слайсов. 12345type slice struct &#123; array unsafe.Pointer len int cap int&#125; Слайс можно считать как ссылку на массив, который содержит элементы слайса.Слайс состоит из трех полей: указателя на первый элемент массива, длины слайса и вместимости слайса.Слайс можно передавать в функции по значению, но при этом изменение элементов слайса в функции отразится на исходном слайсе, так как они ссылаются на один и тот же массив. Слайсом можно манипулировать с помощью различных операций и функций. Например, можно получать подслайсы с помощью оператора [:], добавлять элементы в конец слайса с помощью функции append, копировать элементы из одного слайса в другой с помощью функции copy, сортировать элементы слайса с помощью функции sort, и так далее. Чем массив отличается от слайса?Массив и слайс в golang - это структуры данных, которые могут хранить элементы одного типа. Однако, между ними есть несколько отличий: Массив имеет фиксированный размер, который определяется при его создании. Слайс имеет переменную длину, которая может изменяться в процессе работы с ним. Массив является значением, а слайс - ссылкой. При передаче массива в функцию или присваивании его другой переменной, происходит копирование всех его элементов. При передаче слайса в функцию или присваивании его другой переменной, происходит копирование только его заголовка, а не элементов. Массив можно сравнивать с другим массивом того же размера и типа с помощью оператора ==. Слайс нельзя сравнивать с другим слайсом с помощью оператора ==, только с nil. Массив можно инициализировать с помощью литерала массива, указав его размер и элементы в фигурных скобках. Слайс можно инициализировать с помощью литерала слайса, не указывая его размер, или с помощью функции make, указав его длину и вместимость Как работает append?Функция append в golang позволяет добавлять элементы в конец слайса, увеличивая его длину и вместимость при необходимости. Функция append принимает слайс и один или несколько элементов того же типа, что и слайс, и возвращает новый слайс, содержащий все элементы исходного слайса и добавленные элементы. Например: 123s := []int&#123;1, 2, 3&#125; // создаем слайс из трех элементовs = append(s, 4, 5) // добавляем два элемента в конец слайсаfmt.Println(s) // выводит [1 2 3 4 5] Функция append может также принимать другой слайс в качестве аргумента, если он заключен в оператор … Это позволяет объединять два слайса в один. Например: 1234s1 := []int&#123;1, 2, 3&#125; // создаем первый слайсs2 := []int&#123;4, 5, 6&#125; // создаем второй слайсs3 := append(s1, s2...) // добавляем второй слайс в конец первого слайсаfmt.Println(s3) // выводит [1 2 3 4 5 6] Функция append работает таким образом, что если вместимость исходного слайса достаточна для добавления новых элементов, то она просто копирует их в свободное пространство массива, на который ссылается слайс. Если же вместимость исходного слайса недостаточна, то функция append выделяет новый массив большего размера, копирует в него все элементы исходного слайса и добавляет новые элементы. Затем функция append возвращает новый слайс, который ссылается на новый массив. До какого размера можно увеличивать слайс?Размер слайса в golang ограничен только доступной памятью в системе. Однако, при увеличении размера слайса с помощью функции append, может происходить перевыделение памяти, если вместимость исходного слайса недостаточна для добавления новых элементов. При этом, функция append выделяет новый массив большего размера, копирует в него все элементы исходного слайса и добавляет новые элементы. Затем функция append возвращает новый слайс, который ссылается на новый массив. При перевыделении памяти, функция append следует определенной стратегии, чтобы избежать частого копирования и минимизировать оверхед. При текущем размере слайса менее 256 элементов, размер памяти увеличивается вдвое (вне зависимости от запрашиваемой cap). При размере слайса больше 256 элементов, слайс увеличивается на четверть текущего размера. Например: 12345678910s := make([]int, 0, 5) // создаем слайс с длиной 0 и вместимостью 5fmt.Println(len(s), cap(s)) // выводит 0 5s = append(s, 1, 2, 3, 4, 5) // добавляем 5 элементов в слайсfmt.Println(len(s), cap(s)) // выводит 5 5s = append(s, 6) // добавляем еще один элемент в слайсfmt.Println(len(s), cap(s)) // выводит 6 10 - вместимость увеличилась вдвоеs = append(s, 7, 8, 9, 10) // добавляем еще 4 элемента в слайсfmt.Println(len(s), cap(s)) // выводит 10 10s = append(s, 11) // добавляем еще один элемент в слайсfmt.Println(len(s), cap(s)) // выводит 11 20 - вместимость увеличилась вдвое Берем от слайса слайс, куда будет указывать его указатель?Если мы берем от слайса слайс, то его указатель будет указывать на тот же массив, что и указатель исходного слайса, но с другим смещением. Например, если мы имеем слайс s, который ссылается на массив [1, 2, 3, 4, 5], и мы берем от него подслайс s[1:3], то его указатель будет указывать на тот же массив, но с элемента 2. То есть, подслайс будет содержать элементы [2, 3] из исходного массива. Это означает, что если мы изменим элементы подслайса, то это отразится на исходном слайсе и наоборот, так как они ссылаются на один и тот же массив. Однако, если мы добавим элементы в подслайс с помощью функции append, то это может привести к перевыделению памяти и созданию нового массива, если вместимость подслайса недостаточна. В этом случае, подслайс будет ссылаться на новый массив, а исходный слайс - на старый. В чем разница между слайсом указателей и слайсом значений с точки зрения вызова функции?Разница между слайсом указателей и слайсом значений с точки зрения вызова функции заключается в том, как они передаются и изменяются внутри функции. Слайс указателей - это слайс, который содержит указатели на элементы другого типа, например: 1var sp []*int // слайс указателей на int Слайс значений - это слайс, который содержит элементы другого типа, например: 1var sv []int // слайс значений int Когда мы передаем слайс указателей в функцию, мы копируем только заголовок слайса, который содержит указатель на первый элемент, длину и вместимость. Однако, сами элементы слайса, на которые указывают указатели, не копируются. Это означает, что если мы изменяем элементы слайса в функции, то это отразится на исходном слайсе, так как они ссылаются на одни и те же значения. Например: 123456789101112131415func main() &#123; x := 1 y := 2 z := 3 sp := []*int&#123;&amp;x, &amp;y, &amp;z&#125; // создаем слайс указателей fmt.Println(*sp[0], *sp[1], *sp[2]) // выводит 1 2 3 modifySlicePointers(sp) // передаем слайс в функцию fmt.Println(*sp[0], *sp[1], *sp[2]) // выводит 10 20 30&#125;func modifySlicePointers(sp []*int) &#123; *sp[0] = 10 // изменяем значение, на которое указывает первый элемент слайса *sp[1] = 20 // изменяем значение, на которое указывает второй элемент слайса *sp[2] = 30 // изменяем значение, на которое указывает третий элемент слайса&#125; Когда мы передаем слайс значений в функцию, мы также копируем только заголовок слайса, который содержит указатель на первый элемент, длину и вместимость. Однако, сами элементы слайса, на которые указывает указатель, также не копируются. Это означает, что если мы изменяем элементы слайса в функции, то это также отразится на исходном слайсе, так как они ссылаются на одни и те же значения. Например: 123456789101112func main() &#123; sv := []int&#123;1, 2, 3&#125; // создаем слайс значений fmt.Println(sv[0], sv[1], sv[2]) // выводит 1 2 3 modifySliceValues(sv) // передаем слайс в функцию fmt.Println(sv[0], sv[1], sv[2]) // выводит 10 20 30&#125;func modifySliceValues(sv []int) &#123; sv[0] = 10 // изменяем значение первого элемента слайса sv[1] = 20 // изменяем значение второго элемента слайса sv[2] = 30 // изменяем значение третьего элемента слайса&#125; Стоит быть внимательным при добавлении элементов в слайс в функции с помощью append, так как мы изменяем копию структуры слайса. В этом случае, слайс в функции будет иметь другие значния len, cap и, возможно, ссылки на массив. Это означает, что добавленные элементы не будут видны в исходном слайсе. Например: 12345678910func main() &#123; sv := []int&#123;1, 2, 3&#125; // создаем слайс значений appendSliceValues(sv) // передаем слайс в функцию fmt.Println(sv) // выводит [1 2 3]&#125;func appendSliceValues(sv []int) &#123; sv = append(sv, 4) // добавляем элемент в слайс fmt.Println(sv) // выводит [1 2 3 4]&#125; Если мы хотим, чтобы добавленные элементы сохранялись в исходном слайсе, мы должны возвращать слайс из функции и присваивать его исходному слайсу. Например: 12345678910func main() &#123; sv := []int&#123;1, 2, 3&#125; // создаем слайс значений sv = appendSliceValues(sv) // передаем слайс в функцию и присваиваем его исходному слайсу fmt.Println(sv) // выводит [1 2 3 4]&#125;func appendSliceValues(sv []int) []int &#123; sv = append(sv, 4) // добавляем элемент в слайс return sv // возвращаем слайс из функции&#125; Какие есть ограничения при работе со слайсом?При работе со слайсом есть некоторые ограничения, которые нужно учитывать: Слайс не может содержать элементы разных типов, только одного. Для хранения элементов разных типов нужно использовать структуры, интерфейсы или пустые интерфейсы (interface{}). Слайс не может быть сравнен с другим слайсом с помощью оператора ==, только с nil. Для сравнения двух слайсов нужно использовать цикл или функцию reflect.DeepEqual. Слайс не может быть использован в качестве ключа мапы, так как он не является хешируемым типом. Для использования слайса в качестве ключа мапы нужно преобразовать его в строку или другой хешируемый тип. Слайс не может быть константой, так как он является ссылочным типом. Для объявления слайса нужно использовать var, := или make. Слайс не может быть безопасно передан в функцию или возвращен из функции, так как он ссылается на массив, который может быть изменен в другом месте. Для безопасной передачи или возврата слайса нужно копировать его элементы в новый слайс с помощью функции copy или среза [:]. С какой скоростью идет поиск в массиве и почему?Самый простой алгоритм поиска в массиве - это линейный поиск, который перебирает все элементы массива по порядку, пока не найдет искомый элемент или не дойдет до конца массива. Скорость линейного поиска пропорциональна длине массива, то есть чем больше элементов в массиве, тем дольше будет идти поиск. Сложность линейного поиска в худшем случае составляет O(n), где n - это количество элементов в массиве. Какая есть функции для создания слайса с длиной отличной от нуля?Для создания слайса с длиной отличной от нуля в golang, можно использовать одну из следующих функций: Функция make, которая принимает тип слайса, длину и вместимость, и возвращает слайс с заданными параметрами. Например: 1s := make([]int, 3, 5) // создает слайс из трех целых чисел с вместимостью пять Функция append, которая принимает слайс и один или несколько элементов того же типа, что и слайс, и возвращает новый слайс, содержащий все элементы исходного слайса и добавленные элементы. Например: 12s := []int&#123;&#125; // создает пустой слайсs = append(s, 1, 2, 3) // добавляет три элемента в слайс Литерал слайса, который позволяет инициализировать слайс с помощью фигурных скобок и перечисления элементов. Например: 1s := []int&#123;1, 2, 3&#125; // создает слайс из трех целых чисел Допустима ли конкуррентная работа со слайсом?Такая работа может быть допустима, если соблюдены определенные условия и предосторожности: Во-первых, конкуррентное чтение слайса не представляет опасности, если никто не пишет в слайс в то же время. То есть, можно безопасно читать слайс из нескольких горутин, если слайс не изменяется. Во-вторых, конкуррентная запись в слайс может привести к гонке данных (data race), если не использовать синхронизацию или атомарные операции. Для предотвращения гонки данных, можно использовать один из следующих способов: Использовать мьютекс sync.Mutex или sync.RWMutex для защиты слайса от одновременного доступа. Использовать атомарные операции (sync/atomic) для изменения отдельных элементов слайса. Использовать каналы для передачи слайса между горутинами.","categories":[{"name":"Golang","slug":"Golang","permalink":"https://goxpert.ru/categories/Golang/"},{"name":"Старт","slug":"Golang/Старт","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/"},{"name":"Вопрос-Ответ","slug":"Вопрос-Ответ","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/"},{"name":"Массивы и слайсы","slug":"Вопрос-Ответ/Массивы-и-слайсы","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/%D0%9C%D0%B0%D1%81%D1%81%D0%B8%D0%B2%D1%8B-%D0%B8-%D1%81%D0%BB%D0%B0%D0%B9%D1%81%D1%8B/"},{"name":"Массивы и слайсы","slug":"Golang/Старт/Массивы-и-слайсы","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/%D0%9C%D0%B0%D1%81%D1%81%D0%B8%D0%B2%D1%8B-%D0%B8-%D1%81%D0%BB%D0%B0%D0%B9%D1%81%D1%8B/"}],"tags":[{"name":"Golang, Q&A","slug":"Golang-Q-A","permalink":"https://goxpert.ru/tags/Golang-Q-A/"}]},{"title":"Дженерики","slug":"common/generics","date":"2024-06-01T07:07:00.000Z","updated":"2024-06-01T17:09:22.473Z","comments":true,"path":"2024/06/01/common/generics/","link":"","permalink":"https://goxpert.ru/2024/06/01/common/generics/","excerpt":"","text":"Чем кодогенерация отличается от дженериков?Кодогенерация и дженерики - это два способа написания кода, который не зависит от конкретных типов данных. Однако, они отличаются по тому, когда и как происходит привязка к типам. Кодогенерация - это процесс создания кода из другого кода или данных с помощью специальных инструментов или команд. Кодогенерация позволяет писать обобщенный код, который затем преобразуется в конкретный код для каждого типа данных. Кодогенерация происходит на этапе компиляции или до него, то есть до выполнения программы. Кодогенерация может быть полезна для увеличения производительности, избежания дублирования кода или реализации сложной логики. Дженерики - это способ написания кода, который параметризован по типам данных. Дженерики позволяют писать функции и типы, которые работают с любыми типами данных, передавая их в качестве аргументов. Дженерики происходят на этапе выполнения, то есть во время работы программы. Дженерики могут быть полезны для повышения выразительности, уменьшения количества кода или поддержки полиморфизма. В какой версии появились дженерики?В языке Go до версии 1.18 не было поддержки дженериков, поэтому разработчики часто использовали кодогенерацию или рефлексию для написания обобщенного кода. В версии 1.18 добавлена поддержка дженериков с помощью параметров типов (type parameters), которые позволяют определять функции и типы, которые принимают любые типы данных в качестве аргументов. Как работают дженерики под капотом?Дженерики под капотом в golang работают с помощью механизма, который называется type substitution (подстановка типов). Это означает, что при компиляции программы, компилятор заменяет параметры типов в дженерических функциях и типах на конкретные типы, которые передаются в качестве аргументов. Например, если мы имеем такую дженерическую функцию: 1234567func Map[F, T any](s T, f F) []T &#123; r := make([]T, len(s)) for i, v := range s &#123; r[i] = f(v) &#125; return r&#125; И мы вызываем ее так: 123s := []int&#123;1, 2, 3&#125;f := func(x int) string &#123; return strconv.Itoa(x) &#125;t := Map(s, f) То компилятор преобразует ее в такую функцию: 1234567func Map_int_string(s []int, f func(int) string) []string &#123; r := make([]string, len(s)) for i, v := range s &#123; r[i] = f(v) &#125; return r&#125; И вызывает ее так: 123s := []int&#123;1, 2, 3&#125;f := func(x int) string &#123; return strconv.Itoa(x) &#125;t := Map_int_string(s, f) 2 Таким образом, дженерики под капотом в golang не требуют дополнительной памяти или рефлексии, так как они превращаются в обычный код для каждого типа данных. Однако, это также означает, что дженерики под капотом в golang могут привести к увеличению размера исполняемого файла, так как для каждого типа данных создается своя версия дженерической функции или типа Источники: Habr Habr","categories":[{"name":"Golang","slug":"Golang","permalink":"https://goxpert.ru/categories/Golang/"},{"name":"Старт","slug":"Golang/Старт","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/"},{"name":"Вопрос-Ответ","slug":"Вопрос-Ответ","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/"},{"name":"Generics","slug":"Вопрос-Ответ/Generics","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/Generics/"},{"name":"Generics","slug":"Golang/Старт/Generics","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/Generics/"}],"tags":[{"name":"Golang, Q&A","slug":"Golang-Q-A","permalink":"https://goxpert.ru/tags/Golang-Q-A/"}]},{"title":"Конструкции","slug":"common/constructions","date":"2024-06-01T07:06:00.000Z","updated":"2024-06-01T17:08:54.120Z","comments":true,"path":"2024/06/01/common/constructions/","link":"","permalink":"https://goxpert.ru/2024/06/01/common/constructions/","excerpt":"","text":"Гарантирует ли порядок выполнения конструкция select-case?В Go, порядок выполнения операторов в конструкции select-case не гарантируется. Когда у вас есть несколько операторов case в конструкции select, и они все готовы для выполнения (то есть каналы готовы для чтения/записи), Go выбирает один из них случайным образом. Это означает, что вы не можете предсказать или контролировать, какой оператор case будет выполнен первым, если у вас есть несколько готовых для выполнения операторов case. Это помогает предотвратить блокировку и гарантировать, что все горутины имеют равные шансы на выполнение. Источники: Advicemama Как выглядит конструкция утверждения типа switch?12345switch v := i.(type) &#123;case Type2:case SomeType:default:&#125; Нужно ли в switch-case проставлять break?В языке программирования Go, вам не нужно использовать break в конструкции switch-case. В отличие от некоторых других языков программирования, таких как C++ или Java, каждый case в Go автоматически прерывается, и выполнение программы продолжается после конструкции switch-case. Это означает, что после каждого case не нужно явно указывать break. Однако, если вы хотите, чтобы выполнение продолжилось и в следующем case, вы можете использовать ключевое слово fallthrough. Надеюсь, это помогло вам лучше понять, как работает конструкция switch-case в Go! Если у вас есть еще вопросы, не стесняйтесь задавать.","categories":[{"name":"Golang","slug":"Golang","permalink":"https://goxpert.ru/categories/Golang/"},{"name":"Старт","slug":"Golang/Старт","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/"},{"name":"Вопрос-Ответ","slug":"Вопрос-Ответ","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/"},{"name":"Select-case","slug":"Вопрос-Ответ/Select-case","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/Select-case/"},{"name":"Select-case","slug":"Golang/Старт/Select-case","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/Select-case/"}],"tags":[{"name":"Golang, Q&A","slug":"Golang-Q-A","permalink":"https://goxpert.ru/tags/Golang-Q-A/"}]},{"title":"Ошибки / Panic","slug":"common/errors-panics","date":"2024-06-01T07:05:00.000Z","updated":"2024-06-01T17:08:04.561Z","comments":true,"path":"2024/06/01/common/errors-panics/","link":"","permalink":"https://goxpert.ru/2024/06/01/common/errors-panics/","excerpt":"","text":"Что такое паника?Паника в программировании на Go обозначает серьезную ошибку, которая обычно приводит к немедленному завершению программы. Паника вызывает немедленное прекращение выполнения функции и начинает раскрутку стека Вы можете использовать функции defer и recover для перехвата и обработки паники. Что используется для обработки паники / Куда нужно помещать recover??В Go для обработки паники используются функции defer и recover: Defer: Функция defer в Go позволяет отложить выполнение функции до того, как окружающая функция завершит свое выполнение. Это полезно для обработки ошибок и очистки ресурсов. Recover: Функция recover используется для перехвата и обработки паник. Она должна вызываться внутри отложенной функции. 12345678func someFunction() &#123; defer func() &#123; if r := recover(); r != nil &#123; fmt.Println(&quot;Recovered from&quot;, r) &#125; &#125;() // Код, который может вызвать панику&#125; Какая парадигма в Golang с точки зрения обработки исключений и ошибок? Явная обработка ошибок: В Go ошибки считаются обычной частью работы программы и должны быть явно обработаны. Если функция может вызвать ошибку, она обычно возвращает значение ошибки в качестве одного из своих возвращаемых значений. Нет исключений: В отличие от некоторых других языков, в Go нет встроенной поддержки исключений. Вместо этого функции возвращают ошибки, которые затем проверяются и обрабатываются. Panic и recover: Go предоставляет функции panic и recover для обработки серьезных ошибок, которые обычно приводят к завершению программы. Однако эти функции обычно используются только в случае критических ошибок, и их использование для обычной обработки ошибок не рекомендуется. Defer: Go также предоставляет ключевое слово defer, которое позволяет отложить выполнение функции до того, как окружающая функция завершит свое выполнение. Это полезно для обработки ошибок и очистки ресурсов. Какие есть функции для оборачивания и сравнения ошибок?В Go есть несколько функций, которые можно использовать для оборачивания и сравнения ошибок: Оборачивание ошибок: fmt.Errorf: Эта функция используется для создания новой ошибки, которая включает в себя сообщение об ошибке и другую ошибку в качестве причины. Начиная с Go 1.13, fmt.Errorf поддерживает оборачивание ошибок с помощью нового модификатора формата %w. Сравнение ошибок: errors.Is: Эта функция используется для проверки, является ли одна ошибка другой ошибкой. Она выполняет проверку на равенство ошибок и учитывает обернутые ошибки. errors.As: Эта функция используется для проверки, является ли ошибка или обернутая ошибка определенным типом. Если это так, она присваивает эту ошибку указанному значению.Эти функции позволяют более эффективно работать с ошибками в Go, обеспечивая больше информации об ошибках и делая код более читаемым. Для чего используются ошибки, а для чего паника?В Go ошибки и паника используются для разных целей: Ошибки: Ошибки в Go обычно используются для обработки ожидаемых проблем, которые могут возникнуть во время выполнения программы. Если функция может вызвать ошибку, она обычно возвращает значение ошибки в качестве одного из своих возвращаемых значений. Эти ошибки затем проверяются и обрабатываются явно в коде. Паника: Паника в Go обычно используется для обработки неожиданных ошибок, которые не могут быть обработаны или которые должны привести к немедленному завершению программы. Паника вызывает немедленное прекращение выполнения функции и начинает раскрутку стека. Вы можете использовать функции defer и recover для перехвата и обработки паники. Важно отметить, что хотя паника может казаться похожей на исключения в некоторых других языках, в Go предпочитают явную обработку ошибок, и паника обычно используется только в случае серьезных ошибок.","categories":[{"name":"Golang","slug":"Golang","permalink":"https://goxpert.ru/categories/Golang/"},{"name":"Старт","slug":"Golang/Старт","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/"},{"name":"Вопрос-Ответ","slug":"Вопрос-Ответ","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/"},{"name":"Panic","slug":"Вопрос-Ответ/Panic","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/Panic/"},{"name":"Panic","slug":"Golang/Старт/Panic","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/Panic/"}],"tags":[{"name":"Golang, Q&A","slug":"Golang-Q-A","permalink":"https://goxpert.ru/tags/Golang-Q-A/"}]},{"title":"Defer","slug":"common/defer","date":"2024-06-01T07:04:00.000Z","updated":"2024-06-01T17:07:32.113Z","comments":true,"path":"2024/06/01/common/defer/","link":"","permalink":"https://goxpert.ru/2024/06/01/common/defer/","excerpt":"","text":"Что такое defer, как работает, зачем нужен?defer - это ключевое слово в языке программирования Go, которое используется для определения функции, которая должна быть выполнена после возвращения текущей функции, но до возвращения вызвавшей ее функции. Это позволяет очистить ресурсы или выполнить другие задачи, которые необходимо выполнить после завершения основной работы функции. Когда вызывается функция с ключевым словом defer, она не выполняется немедленно. Вместо этого она добавляется в список функций, которые будут выполняться в обратном порядке после возвращения текущей функции. Это означает, что последняя функция, вызванная с ключевым словом defer, будет выполнена первой после возврата текущей функции. Ключевое слово defer полезно для обеспечения правильной очистки ресурсов, например, для закрытия файлов или сетевых соединений. Его также можно использовать для упрощения обработки ошибок, позволяя функции возвращать значение ошибки, а затем обрабатывать эту ошибку в одном месте после возврата функции. Источники: Habr DigitalOcean Код в defer выполняется до return или после?Оператор defer в Go выполняется перед оператором return. Это позволяет удобно управлять ресурсами, такими как закрытие файлов или освобождение памяти, перед тем как функция завершится. defer выполняется после того, как оператор return вычислит возвращаемые значения, но перед фактическим возвращением управления из функции. Пример: 1234567891011121314package mainimport &quot;fmt&quot;func main() &#123; defer fmt.Println(changePointer()) fmt.Println(&quot;Third&quot;)&#125;func changePointer() string &#123; defer fmt.Println(&quot;Second&quot;) fmt.Println(&quot;First&quot;) return &quot;Fourth&quot;&#125; Где инициализируется defer, в стеке или куче?Дефер-вызовы в Go инициализируются в стеке, а не в куче. Когда функция, содержащая дефер-вызовы, начинает выполняться, эти вызовы помещаются в стек. Затем, когда функция завершается, стек разворачивается, и дефер-вызовы выполняются в обратном порядке, в котором они были помещены в стек. Это позволяет гарантировать, что ресурсы, такие как файлы или соединения, будут освобождены в правильном порядке, даже если в функции произойдет ошибка. Задача #1title123456789101112131415package mainimport ( &quot;fmt&quot;)func main() &#123; tmp := 101 fmt.Println(tmp) defer func() &#123; fmt.Println(tmp) &#125;() tmp = 202 return&#125; Этот код использует концепцию “замыкания”. Замыкание - это функция, которая имеет доступ к переменным из своего внешнего контекста.В данном случае, анонимная функция, которая откладывается с помощью defer, имеет доступ к переменной tmp из внешнего контекста. Когда вы вызываете defer func() &#123; fmt.Println(tmp) &#125;(), функция “захватывает” текущее значение tmp на момент вызова. Однако в этом случае tmp является ссылкой на переменную во внешнем контексте. Это значит, что если tmp изменяется после вызова defer, то измененное значение будет использоваться в отложенной функции. tmp сначала устанавливается в 101, затем выводится, затем откладывается функция, которая выводит tmp, и наконец tmp изменяется на 202.Когда функция main завершается, отложенная функция вызывается и выводит текущее значение tmp, которое теперь равно 202.В результате, вывод программы будет 101 и 202. Задача #2title123456789101112131415package mainimport ( &quot;fmt&quot;)func main() &#123; tmp := 101 fmt.Println(tmp) defer func(tmpx int) &#123; fmt.Println(tmpx) &#125;(tmp) tmp = 202 return&#125; В этом примере мы передаем tmp в отложенную функцию как аргумент. Это означает, что значение tmp будет скопировано в отложенную функцию, а не ссылаться на переменную во внешнем контексте. В результате, вывод программы будет 101 и 101.","categories":[{"name":"Golang","slug":"Golang","permalink":"https://goxpert.ru/categories/Golang/"},{"name":"Старт","slug":"Golang/Старт","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/"},{"name":"Вопрос-Ответ","slug":"Вопрос-Ответ","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/"},{"name":"Defer","slug":"Вопрос-Ответ/Defer","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/Defer/"},{"name":"Defer","slug":"Golang/Старт/Defer","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/Defer/"}],"tags":[{"name":"Golang, Q&A","slug":"Golang-Q-A","permalink":"https://goxpert.ru/tags/Golang-Q-A/"}]},{"title":"Пакеты","slug":"common/package","date":"2024-06-01T07:03:00.000Z","updated":"2024-06-01T17:06:56.711Z","comments":true,"path":"2024/06/01/common/package/","link":"","permalink":"https://goxpert.ru/2024/06/01/common/package/","excerpt":"","text":"Что такое пакет?В языке программирования Go, пакет (package) - это коллекция исходных файлов Go, которые находятся в одной и той же директории. Все файлы в одном пакете должны иметь одно и то же имя пакета в начале файла. Пакеты в Go используются для организации и повторного использования кода. Они представляют собой удобный способ разделения кода на отдельные модули. Это позволяет определить пакет с нужной функциональностью один раз и затем использовать его многократно в различных программах. В Go есть два типа пакетов: исполняемые (executable) и библиотеки (reusable). Исполняемые пакеты должны иметь имя main и содержать функцию main, которая является входной точкой в приложение. Все остальные пакеты являются библиотеками и не могут быть напрямую выполнены. Расскажи про папку internalВ Go, папка internal используется для хранения кода, который не должен быть доступен за пределами текущего модуля. Это означает, что любой код, который находится в папке internal (или в подпапках этой папки), может быть импортирован и использован только внутри того же модуля. Это полезно, когда вы хотите скрыть определенные части вашего кода от внешнего мира, чтобы предотвратить его неправильное использование. title123456test├─ go.mod├─ internal│ └─ handler│ └─ opkg.go├─ main.go","categories":[{"name":"Golang","slug":"Golang","permalink":"https://goxpert.ru/categories/Golang/"},{"name":"Старт","slug":"Golang/Старт","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/"},{"name":"Вопрос-Ответ","slug":"Вопрос-Ответ","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/"},{"name":"Пакеты","slug":"Вопрос-Ответ/Пакеты","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/%D0%9F%D0%B0%D0%BA%D0%B5%D1%82%D1%8B/"},{"name":"Пакеты","slug":"Golang/Старт/Пакеты","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/%D0%9F%D0%B0%D0%BA%D0%B5%D1%82%D1%8B/"}],"tags":[{"name":"Golang, Q&A","slug":"Golang-Q-A","permalink":"https://goxpert.ru/tags/Golang-Q-A/"}]},{"title":"Общие вопросы","slug":"overall-questions","date":"2024-06-01T07:02:00.000Z","updated":"2024-06-01T17:05:33.567Z","comments":true,"path":"2024/06/01/overall-questions/","link":"","permalink":"https://goxpert.ru/2024/06/01/overall-questions/","excerpt":"","text":"Какие технологические преимущества экосистемы Go вы можете назвать?В случае с экосистемой Go к потенциальным преимуществам можно отнести: Большое и активное сообщество разработчиков, которые вносят свой вклад в развитие языка Go и его экосистемы. Богатый набор библиотек и инструментов, облегчающих разработку, тестирование и развертывание приложений на Go. Совместимость с широким спектром платформ и систем, что делает его универсальным выбором для создания приложений. Сильная поддержка конкурентного и параллельного программирования, что позволяет повысить производительность и масштабируемость приложений. Упор на простоту и читабельность, что облегчает изучение и использование языка разработчиками и способствует развитию экосистемы. Go - императивный или декларативный? А в чем разница?Go - императивный язык программирования. Это означает, что в нем используются инструкции, которые описывают, как выполнять задачу. В декларативных языках программирования, например, SQL, описывается, что должно быть сделано, а не как это сделать. Какие особенности Go вы можете назвать? Статическая типизация Сборка мусора Конкурентность Параллелизм Отсутствие исключений Строгая типизация Строгая проверка ошибок Почему треды в Go - легковесныеВ Go горутины - это легковесные потоки, управляемые средой выполнения Go. Они более легковесны, чем потоки операционной системы, потому что занимают меньше места в памяти, обычно около 2 килобайт, по сравнению с памятью потока операционной системы, которая может составлять несколько мегабайт. Такой меньший объем памяти позволяет среде выполнения Go создавать большое количество горутин, часто тысячи или даже миллионы, не исчерпывая системных ресурсов. Кроме того, среда выполнения Go использует планировщик, чтобы мультиплексировать горутины на меньшее число потоков операционной системы, что позволяет снизить накладные расходы на создание и управление потоками. Планировщик также может выполнять контекстные переключения между горутинами без участия операционной системы, что может быть быстрее, чем полное контекстное переключение между потоками операционной системы. В целом, сочетание меньшего объема памяти и планировщика пользовательского пространства делает горутины легким и эффективным механизмом для параллельного выполнения в программах на Go. Какие средства обобщенного программирования есть в Go?В Go 1.18 появилась поддержка обобщенного программирования. Обобщенное программирование - это способность писать функции и типы, которые работают с любыми типами данных, а не только с конкретными типами данных. В Go 1.18 обобщенное программирование реализовано с помощью параметризованных типов и функций. Какие средства метапрограммирования есть в Go?В Go нет средств метапрограммирования, таких как макросы, шаблоны. Вместо этого Go предоставляет мощную систему интерфейсов, которая позволяет писать гибкий и расширяемый код, который может быть легко адаптирован к различным типам данных. Какая сортировка используется в Golang?В Go используется алгоритм сортировки “Quicksort”, который является эффективным алгоритмом сортировки с асимптотической сложностью O(n log n). Этот алгоритм используется в стандартной библиотеке “sort” для сортировки слайсов и пользовательских коллекций данных. Какая кодировка используется в Golang?Go поддерживает UTF-8 кодировку по умолчанию для всех строковых типов. Это означает, что вы можете безопасно использовать Unicode символы в строках в Go. Библиотека “unicode/utf8” предоставляет функции для работы с UTF-8 кодированными строками. Можно ли в Golang создать статический метод?В Go нет классов и, следовательно, нет статических методов в традиционном понимании этого термина, как в языках, таких как Java или C++. Однако, вы можете создать функции, которые привязаны к определенному типу данных, что близко к понятию статического метода. Вот пример: 1234567type MyType struct &#123; value int&#125;func (t MyType) StaticMethod() int &#123; return t.value * 2&#125; В этом примере StaticMethod является функцией, которая привязана к типу MyType. Вы можете вызвать эту функцию на экземпляре MyType. 12t := MyType&#123;value: 5&#125;result := t.StaticMethod() // result is 10 Это не совсем то же самое, что статический метод в языках с классами, но это ближайший аналог в Go.","categories":[{"name":"Golang","slug":"Golang","permalink":"https://goxpert.ru/categories/Golang/"},{"name":"Старт","slug":"Golang/Старт","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/"},{"name":"Вопрос-Ответ","slug":"Вопрос-Ответ","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/"},{"name":"Общие","slug":"Вопрос-Ответ/Общие","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/%D0%9E%D0%B1%D1%89%D0%B8%D0%B5/"},{"name":"Общие","slug":"Golang/Старт/Общие","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/%D0%9E%D0%B1%D1%89%D0%B8%D0%B5/"}],"tags":[{"name":"Golang, Q&A","slug":"Golang-Q-A","permalink":"https://goxpert.ru/tags/Golang-Q-A/"}]},{"title":"С 1 Июня 2024!","slug":"helloworld","date":"2024-06-01T07:00:00.000Z","updated":"2024-06-02T07:43:20.347Z","comments":true,"path":"2024/06/01/helloworld/","link":"","permalink":"https://goxpert.ru/2024/06/01/helloworld/","excerpt":"","text":"Добрый день! Сегодня родился сайт GoXpert. Для чего нужен этот сайт: Во-первых, для меня. Да, меня зовут Дмитрий Сигаев. Это сайт, на мой взгляд, поможет мне структурировать свои знания в разных областях, но в основном в экосистеме GO. Я много, что умею, но не могу в нужный для меня момент вынуть из своей головы нужной информации. Данный сайт — это так называемое хранилище моего опыта и якорей для быстрой настройки кратковременной памяти :) Во-вторых, если это полезно для меня, то, на мой взгляд, найдется тот, кому это сайт тоже поможет в чем-то разобраться… В-третьих, хочу выразить благодарность Сергею Артамонову. Спасибо за второй шанс и последствие в виде данного сайта. Надеюсь, быть его падаваном и соавтором публикаций на данном сайта. Ладно, не будем терять времени… поехали… Let’s GO! Небо мой дом... var ap = new APlayer({ element: document.getElementById(\"aplayer-LMBIqxFh\"), narrow: false, autoplay: false, showlrc: 2, music: { title: \"Лови Момент\", author: \"Machete\", url: \"/audio/MacheteTakeIt.mp3\", pic: \"\", } }); window.aplayers || (window.aplayers = []); window.aplayers.push(ap);","categories":[{"name":"Golang","slug":"Golang","permalink":"https://goxpert.ru/categories/Golang/"},{"name":"Старт","slug":"Golang/Старт","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/"}],"tags":[{"name":"Golang","slug":"Golang","permalink":"https://goxpert.ru/tags/Golang/"}]}],"categories":[{"name":"Golang","slug":"Golang","permalink":"https://goxpert.ru/categories/Golang/"},{"name":"Старт","slug":"Golang/Старт","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/"},{"name":"Вопрос-Ответ","slug":"Вопрос-Ответ","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/"},{"name":"Примитивы синхронизации","slug":"Вопрос-Ответ/Примитивы-синхронизации","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/%D0%9F%D1%80%D0%B8%D0%BC%D0%B8%D1%82%D0%B8%D0%B2%D1%8B-%D1%81%D0%B8%D0%BD%D1%85%D1%80%D0%BE%D0%BD%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D0%B8/"},{"name":"Примитивы синхронизации","slug":"Golang/Старт/Примитивы-синхронизации","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/%D0%9F%D1%80%D0%B8%D0%BC%D0%B8%D1%82%D0%B8%D0%B2%D1%8B-%D1%81%D0%B8%D0%BD%D1%85%D1%80%D0%BE%D0%BD%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D0%B8/"},{"name":"Типы","slug":"Вопрос-Ответ/Типы","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/%D0%A2%D0%B8%D0%BF%D1%8B/"},{"name":"Типы","slug":"Golang/Старт/Типы","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/%D0%A2%D0%B8%D0%BF%D1%8B/"},{"name":"Хеш-мапы","slug":"Вопрос-Ответ/Хеш-мапы","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/%D0%A5%D0%B5%D1%88-%D0%BC%D0%B0%D0%BF%D1%8B/"},{"name":"Хеш-мапы","slug":"Golang/Старт/Хеш-мапы","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/%D0%A5%D0%B5%D1%88-%D0%BC%D0%B0%D0%BF%D1%8B/"},{"name":"Интерфейсы","slug":"Вопрос-Ответ/Интерфейсы","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/%D0%98%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81%D1%8B/"},{"name":"Интерфейсы","slug":"Golang/Старт/Интерфейсы","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/%D0%98%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81%D1%8B/"},{"name":"Указатели","slug":"Вопрос-Ответ/Указатели","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/%D0%A3%D0%BA%D0%B0%D0%B7%D0%B0%D1%82%D0%B5%D0%BB%D0%B8/"},{"name":"Указатели","slug":"Golang/Старт/Указатели","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/%D0%A3%D0%BA%D0%B0%D0%B7%D0%B0%D1%82%D0%B5%D0%BB%D0%B8/"},{"name":"Структуры","slug":"Вопрос-Ответ/Структуры","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/%D0%A1%D1%82%D1%80%D1%83%D0%BA%D1%82%D1%83%D1%80%D1%8B/"},{"name":"Структуры","slug":"Golang/Старт/Структуры","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/%D0%A1%D1%82%D1%80%D1%83%D0%BA%D1%82%D1%83%D1%80%D1%8B/"},{"name":"Строки","slug":"Вопрос-Ответ/Строки","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/%D0%A1%D1%82%D1%80%D0%BE%D0%BA%D0%B8/"},{"name":"Строки","slug":"Golang/Старт/Строки","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/%D0%A1%D1%82%D1%80%D0%BE%D0%BA%D0%B8/"},{"name":"Массивы и слайсы","slug":"Вопрос-Ответ/Массивы-и-слайсы","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/%D0%9C%D0%B0%D1%81%D1%81%D0%B8%D0%B2%D1%8B-%D0%B8-%D1%81%D0%BB%D0%B0%D0%B9%D1%81%D1%8B/"},{"name":"Массивы и слайсы","slug":"Golang/Старт/Массивы-и-слайсы","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/%D0%9C%D0%B0%D1%81%D1%81%D0%B8%D0%B2%D1%8B-%D0%B8-%D1%81%D0%BB%D0%B0%D0%B9%D1%81%D1%8B/"},{"name":"Generics","slug":"Вопрос-Ответ/Generics","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/Generics/"},{"name":"Generics","slug":"Golang/Старт/Generics","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/Generics/"},{"name":"Select-case","slug":"Вопрос-Ответ/Select-case","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/Select-case/"},{"name":"Select-case","slug":"Golang/Старт/Select-case","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/Select-case/"},{"name":"Panic","slug":"Вопрос-Ответ/Panic","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/Panic/"},{"name":"Panic","slug":"Golang/Старт/Panic","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/Panic/"},{"name":"Defer","slug":"Вопрос-Ответ/Defer","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/Defer/"},{"name":"Defer","slug":"Golang/Старт/Defer","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/Defer/"},{"name":"Пакеты","slug":"Вопрос-Ответ/Пакеты","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/%D0%9F%D0%B0%D0%BA%D0%B5%D1%82%D1%8B/"},{"name":"Пакеты","slug":"Golang/Старт/Пакеты","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/%D0%9F%D0%B0%D0%BA%D0%B5%D1%82%D1%8B/"},{"name":"Общие","slug":"Вопрос-Ответ/Общие","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/%D0%9E%D0%B1%D1%89%D0%B8%D0%B5/"},{"name":"Общие","slug":"Golang/Старт/Общие","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/%D0%9E%D0%B1%D1%89%D0%B8%D0%B5/"}],"tags":[{"name":"Golang, Q&A","slug":"Golang-Q-A","permalink":"https://goxpert.ru/tags/Golang-Q-A/"},{"name":"Golang","slug":"Golang","permalink":"https://goxpert.ru/tags/Golang/"}]}