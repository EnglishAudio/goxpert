{"meta":{"title":"GoXpert.ru","subtitle":"GoXpert.ru для тех, кто хочет стать экспертом в GO разработке","description":"Секреты Golang. Архитектура и дизайн приложений на GO. Всё о GO изнутри","author":"авторы проекта GoXpert","url":"https://goxpert.ru","root":"/"},"pages":[{"title":"","date":"2021-11-27T21:16:20.121Z","updated":"2021-11-27T21:16:20.076Z","comments":true,"path":"search.html","permalink":"https://goxpert.ru/search.html","excerpt":"","text":"(function(w,d,c){var s=d.createElement('script'),h=d.getElementsByTagName('script')[0];s.type='text/javascript';s.async=true;s.charset='utf-8';s.src=(d.location.protocol==='https:'?'https:':'http:')+'//site.yandex.net/v2.0/js/all.js';h.parentNode.insertBefore(s,h);(w[c]||(w[c]=[])).push(function(){Ya.Site.Results.init();})})(window,document,'yandex_site_callbacks');"}],"posts":[{"title":"Дженерики","slug":"common/generics","date":"2024-06-01T07:07:00.000Z","updated":"2024-06-01T17:09:22.473Z","comments":true,"path":"2024/06/01/common/generics/","link":"","permalink":"https://goxpert.ru/2024/06/01/common/generics/","excerpt":"","text":"Чем кодогенерация отличается от дженериков?Кодогенерация и дженерики - это два способа написания кода, который не зависит от конкретных типов данных. Однако, они отличаются по тому, когда и как происходит привязка к типам. Кодогенерация - это процесс создания кода из другого кода или данных с помощью специальных инструментов или команд. Кодогенерация позволяет писать обобщенный код, который затем преобразуется в конкретный код для каждого типа данных. Кодогенерация происходит на этапе компиляции или до него, то есть до выполнения программы. Кодогенерация может быть полезна для увеличения производительности, избежания дублирования кода или реализации сложной логики. Дженерики - это способ написания кода, который параметризован по типам данных. Дженерики позволяют писать функции и типы, которые работают с любыми типами данных, передавая их в качестве аргументов. Дженерики происходят на этапе выполнения, то есть во время работы программы. Дженерики могут быть полезны для повышения выразительности, уменьшения количества кода или поддержки полиморфизма. В какой версии появились дженерики?В языке Go до версии 1.18 не было поддержки дженериков, поэтому разработчики часто использовали кодогенерацию или рефлексию для написания обобщенного кода. В версии 1.18 добавлена поддержка дженериков с помощью параметров типов (type parameters), которые позволяют определять функции и типы, которые принимают любые типы данных в качестве аргументов. Как работают дженерики под капотом?Дженерики под капотом в golang работают с помощью механизма, который называется type substitution (подстановка типов). Это означает, что при компиляции программы, компилятор заменяет параметры типов в дженерических функциях и типах на конкретные типы, которые передаются в качестве аргументов. Например, если мы имеем такую дженерическую функцию: 1234567func Map[F, T any](s T, f F) []T &#123; r := make([]T, len(s)) for i, v := range s &#123; r[i] = f(v) &#125; return r&#125; И мы вызываем ее так: 123s := []int&#123;1, 2, 3&#125;f := func(x int) string &#123; return strconv.Itoa(x) &#125;t := Map(s, f) То компилятор преобразует ее в такую функцию: 1234567func Map_int_string(s []int, f func(int) string) []string &#123; r := make([]string, len(s)) for i, v := range s &#123; r[i] = f(v) &#125; return r&#125; И вызывает ее так: 123s := []int&#123;1, 2, 3&#125;f := func(x int) string &#123; return strconv.Itoa(x) &#125;t := Map_int_string(s, f) 2 Таким образом, дженерики под капотом в golang не требуют дополнительной памяти или рефлексии, так как они превращаются в обычный код для каждого типа данных. Однако, это также означает, что дженерики под капотом в golang могут привести к увеличению размера исполняемого файла, так как для каждого типа данных создается своя версия дженерической функции или типа Источники: Habr Habr","categories":[{"name":"Golang","slug":"Golang","permalink":"https://goxpert.ru/categories/Golang/"},{"name":"Старт","slug":"Golang/Старт","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/"},{"name":"Вопрос-Ответ","slug":"Вопрос-Ответ","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/"},{"name":"Generics","slug":"Вопрос-Ответ/Generics","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/Generics/"},{"name":"Generics","slug":"Golang/Старт/Generics","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/Generics/"}],"tags":[{"name":"Golang, Q&A","slug":"Golang-Q-A","permalink":"https://goxpert.ru/tags/Golang-Q-A/"}]},{"title":"Конструкции","slug":"common/constructions","date":"2024-06-01T07:06:00.000Z","updated":"2024-06-01T17:08:54.120Z","comments":true,"path":"2024/06/01/common/constructions/","link":"","permalink":"https://goxpert.ru/2024/06/01/common/constructions/","excerpt":"","text":"Гарантирует ли порядок выполнения конструкция select-case?В Go, порядок выполнения операторов в конструкции select-case не гарантируется. Когда у вас есть несколько операторов case в конструкции select, и они все готовы для выполнения (то есть каналы готовы для чтения/записи), Go выбирает один из них случайным образом. Это означает, что вы не можете предсказать или контролировать, какой оператор case будет выполнен первым, если у вас есть несколько готовых для выполнения операторов case. Это помогает предотвратить блокировку и гарантировать, что все горутины имеют равные шансы на выполнение. Источники: Advicemama Как выглядит конструкция утверждения типа switch?12345switch v := i.(type) &#123;case Type2:case SomeType:default:&#125; Нужно ли в switch-case проставлять break?В языке программирования Go, вам не нужно использовать break в конструкции switch-case. В отличие от некоторых других языков программирования, таких как C++ или Java, каждый case в Go автоматически прерывается, и выполнение программы продолжается после конструкции switch-case. Это означает, что после каждого case не нужно явно указывать break. Однако, если вы хотите, чтобы выполнение продолжилось и в следующем case, вы можете использовать ключевое слово fallthrough. Надеюсь, это помогло вам лучше понять, как работает конструкция switch-case в Go! Если у вас есть еще вопросы, не стесняйтесь задавать.","categories":[{"name":"Golang","slug":"Golang","permalink":"https://goxpert.ru/categories/Golang/"},{"name":"Старт","slug":"Golang/Старт","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/"},{"name":"Вопрос-Ответ","slug":"Вопрос-Ответ","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/"},{"name":"Select-case","slug":"Вопрос-Ответ/Select-case","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/Select-case/"},{"name":"Select-case","slug":"Golang/Старт/Select-case","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/Select-case/"}],"tags":[{"name":"Golang, Q&A","slug":"Golang-Q-A","permalink":"https://goxpert.ru/tags/Golang-Q-A/"}]},{"title":"Ошибки / Panic","slug":"common/errors-panics","date":"2024-06-01T07:05:00.000Z","updated":"2024-06-01T17:08:04.561Z","comments":true,"path":"2024/06/01/common/errors-panics/","link":"","permalink":"https://goxpert.ru/2024/06/01/common/errors-panics/","excerpt":"","text":"Что такое паника?Паника в программировании на Go обозначает серьезную ошибку, которая обычно приводит к немедленному завершению программы. Паника вызывает немедленное прекращение выполнения функции и начинает раскрутку стека Вы можете использовать функции defer и recover для перехвата и обработки паники. Что используется для обработки паники / Куда нужно помещать recover??В Go для обработки паники используются функции defer и recover: Defer: Функция defer в Go позволяет отложить выполнение функции до того, как окружающая функция завершит свое выполнение. Это полезно для обработки ошибок и очистки ресурсов. Recover: Функция recover используется для перехвата и обработки паник. Она должна вызываться внутри отложенной функции. 12345678func someFunction() &#123; defer func() &#123; if r := recover(); r != nil &#123; fmt.Println(&quot;Recovered from&quot;, r) &#125; &#125;() // Код, который может вызвать панику&#125; Какая парадигма в Golang с точки зрения обработки исключений и ошибок? Явная обработка ошибок: В Go ошибки считаются обычной частью работы программы и должны быть явно обработаны. Если функция может вызвать ошибку, она обычно возвращает значение ошибки в качестве одного из своих возвращаемых значений. Нет исключений: В отличие от некоторых других языков, в Go нет встроенной поддержки исключений. Вместо этого функции возвращают ошибки, которые затем проверяются и обрабатываются. Panic и recover: Go предоставляет функции panic и recover для обработки серьезных ошибок, которые обычно приводят к завершению программы. Однако эти функции обычно используются только в случае критических ошибок, и их использование для обычной обработки ошибок не рекомендуется. Defer: Go также предоставляет ключевое слово defer, которое позволяет отложить выполнение функции до того, как окружающая функция завершит свое выполнение. Это полезно для обработки ошибок и очистки ресурсов. Какие есть функции для оборачивания и сравнения ошибок?В Go есть несколько функций, которые можно использовать для оборачивания и сравнения ошибок: Оборачивание ошибок: fmt.Errorf: Эта функция используется для создания новой ошибки, которая включает в себя сообщение об ошибке и другую ошибку в качестве причины. Начиная с Go 1.13, fmt.Errorf поддерживает оборачивание ошибок с помощью нового модификатора формата %w. Сравнение ошибок: errors.Is: Эта функция используется для проверки, является ли одна ошибка другой ошибкой. Она выполняет проверку на равенство ошибок и учитывает обернутые ошибки. errors.As: Эта функция используется для проверки, является ли ошибка или обернутая ошибка определенным типом. Если это так, она присваивает эту ошибку указанному значению.Эти функции позволяют более эффективно работать с ошибками в Go, обеспечивая больше информации об ошибках и делая код более читаемым. Для чего используются ошибки, а для чего паника?В Go ошибки и паника используются для разных целей: Ошибки: Ошибки в Go обычно используются для обработки ожидаемых проблем, которые могут возникнуть во время выполнения программы. Если функция может вызвать ошибку, она обычно возвращает значение ошибки в качестве одного из своих возвращаемых значений. Эти ошибки затем проверяются и обрабатываются явно в коде. Паника: Паника в Go обычно используется для обработки неожиданных ошибок, которые не могут быть обработаны или которые должны привести к немедленному завершению программы. Паника вызывает немедленное прекращение выполнения функции и начинает раскрутку стека. Вы можете использовать функции defer и recover для перехвата и обработки паники. Важно отметить, что хотя паника может казаться похожей на исключения в некоторых других языках, в Go предпочитают явную обработку ошибок, и паника обычно используется только в случае серьезных ошибок.","categories":[{"name":"Golang","slug":"Golang","permalink":"https://goxpert.ru/categories/Golang/"},{"name":"Старт","slug":"Golang/Старт","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/"},{"name":"Вопрос-Ответ","slug":"Вопрос-Ответ","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/"},{"name":"Panic","slug":"Вопрос-Ответ/Panic","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/Panic/"},{"name":"Panic","slug":"Golang/Старт/Panic","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/Panic/"}],"tags":[{"name":"Golang, Q&A","slug":"Golang-Q-A","permalink":"https://goxpert.ru/tags/Golang-Q-A/"}]},{"title":"Defer","slug":"common/defer","date":"2024-06-01T07:04:00.000Z","updated":"2024-06-01T17:07:32.113Z","comments":true,"path":"2024/06/01/common/defer/","link":"","permalink":"https://goxpert.ru/2024/06/01/common/defer/","excerpt":"","text":"Что такое defer, как работает, зачем нужен?defer - это ключевое слово в языке программирования Go, которое используется для определения функции, которая должна быть выполнена после возвращения текущей функции, но до возвращения вызвавшей ее функции. Это позволяет очистить ресурсы или выполнить другие задачи, которые необходимо выполнить после завершения основной работы функции. Когда вызывается функция с ключевым словом defer, она не выполняется немедленно. Вместо этого она добавляется в список функций, которые будут выполняться в обратном порядке после возвращения текущей функции. Это означает, что последняя функция, вызванная с ключевым словом defer, будет выполнена первой после возврата текущей функции. Ключевое слово defer полезно для обеспечения правильной очистки ресурсов, например, для закрытия файлов или сетевых соединений. Его также можно использовать для упрощения обработки ошибок, позволяя функции возвращать значение ошибки, а затем обрабатывать эту ошибку в одном месте после возврата функции. Источники: Habr DigitalOcean Код в defer выполняется до return или после?Оператор defer в Go выполняется перед оператором return. Это позволяет удобно управлять ресурсами, такими как закрытие файлов или освобождение памяти, перед тем как функция завершится. defer выполняется после того, как оператор return вычислит возвращаемые значения, но перед фактическим возвращением управления из функции. Пример: 1234567891011121314package mainimport &quot;fmt&quot;func main() &#123; defer fmt.Println(changePointer()) fmt.Println(&quot;Third&quot;)&#125;func changePointer() string &#123; defer fmt.Println(&quot;Second&quot;) fmt.Println(&quot;First&quot;) return &quot;Fourth&quot;&#125; Где инициализируется defer, в стеке или куче?Дефер-вызовы в Go инициализируются в стеке, а не в куче. Когда функция, содержащая дефер-вызовы, начинает выполняться, эти вызовы помещаются в стек. Затем, когда функция завершается, стек разворачивается, и дефер-вызовы выполняются в обратном порядке, в котором они были помещены в стек. Это позволяет гарантировать, что ресурсы, такие как файлы или соединения, будут освобождены в правильном порядке, даже если в функции произойдет ошибка. Задача #1title123456789101112131415package mainimport ( &quot;fmt&quot;)func main() &#123; tmp := 101 fmt.Println(tmp) defer func() &#123; fmt.Println(tmp) &#125;() tmp = 202 return&#125; Этот код использует концепцию “замыкания”. Замыкание - это функция, которая имеет доступ к переменным из своего внешнего контекста.В данном случае, анонимная функция, которая откладывается с помощью defer, имеет доступ к переменной tmp из внешнего контекста. Когда вы вызываете defer func() &#123; fmt.Println(tmp) &#125;(), функция “захватывает” текущее значение tmp на момент вызова. Однако в этом случае tmp является ссылкой на переменную во внешнем контексте. Это значит, что если tmp изменяется после вызова defer, то измененное значение будет использоваться в отложенной функции. tmp сначала устанавливается в 101, затем выводится, затем откладывается функция, которая выводит tmp, и наконец tmp изменяется на 202.Когда функция main завершается, отложенная функция вызывается и выводит текущее значение tmp, которое теперь равно 202.В результате, вывод программы будет 101 и 202. Задача #2title123456789101112131415package mainimport ( &quot;fmt&quot;)func main() &#123; tmp := 101 fmt.Println(tmp) defer func(tmpx int) &#123; fmt.Println(tmpx) &#125;(tmp) tmp = 202 return&#125; В этом примере мы передаем tmp в отложенную функцию как аргумент. Это означает, что значение tmp будет скопировано в отложенную функцию, а не ссылаться на переменную во внешнем контексте. В результате, вывод программы будет 101 и 101.","categories":[{"name":"Golang","slug":"Golang","permalink":"https://goxpert.ru/categories/Golang/"},{"name":"Старт","slug":"Golang/Старт","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/"},{"name":"Вопрос-Ответ","slug":"Вопрос-Ответ","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/"},{"name":"Defer","slug":"Вопрос-Ответ/Defer","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/Defer/"},{"name":"Defer","slug":"Golang/Старт/Defer","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/Defer/"}],"tags":[{"name":"Golang, Q&A","slug":"Golang-Q-A","permalink":"https://goxpert.ru/tags/Golang-Q-A/"}]},{"title":"Пакеты","slug":"common/package","date":"2024-06-01T07:03:00.000Z","updated":"2024-06-01T17:06:56.711Z","comments":true,"path":"2024/06/01/common/package/","link":"","permalink":"https://goxpert.ru/2024/06/01/common/package/","excerpt":"","text":"Что такое пакет?В языке программирования Go, пакет (package) - это коллекция исходных файлов Go, которые находятся в одной и той же директории. Все файлы в одном пакете должны иметь одно и то же имя пакета в начале файла. Пакеты в Go используются для организации и повторного использования кода. Они представляют собой удобный способ разделения кода на отдельные модули. Это позволяет определить пакет с нужной функциональностью один раз и затем использовать его многократно в различных программах. В Go есть два типа пакетов: исполняемые (executable) и библиотеки (reusable). Исполняемые пакеты должны иметь имя main и содержать функцию main, которая является входной точкой в приложение. Все остальные пакеты являются библиотеками и не могут быть напрямую выполнены. Расскажи про папку internalВ Go, папка internal используется для хранения кода, который не должен быть доступен за пределами текущего модуля. Это означает, что любой код, который находится в папке internal (или в подпапках этой папки), может быть импортирован и использован только внутри того же модуля. Это полезно, когда вы хотите скрыть определенные части вашего кода от внешнего мира, чтобы предотвратить его неправильное использование. title123456test├─ go.mod├─ internal│ └─ handler│ └─ opkg.go├─ main.go","categories":[{"name":"Golang","slug":"Golang","permalink":"https://goxpert.ru/categories/Golang/"},{"name":"Старт","slug":"Golang/Старт","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/"},{"name":"Вопрос-Ответ","slug":"Вопрос-Ответ","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/"},{"name":"Пакеты","slug":"Вопрос-Ответ/Пакеты","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/%D0%9F%D0%B0%D0%BA%D0%B5%D1%82%D1%8B/"},{"name":"Пакеты","slug":"Golang/Старт/Пакеты","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/%D0%9F%D0%B0%D0%BA%D0%B5%D1%82%D1%8B/"}],"tags":[{"name":"Golang, Q&A","slug":"Golang-Q-A","permalink":"https://goxpert.ru/tags/Golang-Q-A/"}]},{"title":"Общие вопросы","slug":"overall-questions","date":"2024-06-01T07:02:00.000Z","updated":"2024-06-01T17:05:33.567Z","comments":true,"path":"2024/06/01/overall-questions/","link":"","permalink":"https://goxpert.ru/2024/06/01/overall-questions/","excerpt":"","text":"Какие технологические преимущества экосистемы Go вы можете назвать?В случае с экосистемой Go к потенциальным преимуществам можно отнести: Большое и активное сообщество разработчиков, которые вносят свой вклад в развитие языка Go и его экосистемы. Богатый набор библиотек и инструментов, облегчающих разработку, тестирование и развертывание приложений на Go. Совместимость с широким спектром платформ и систем, что делает его универсальным выбором для создания приложений. Сильная поддержка конкурентного и параллельного программирования, что позволяет повысить производительность и масштабируемость приложений. Упор на простоту и читабельность, что облегчает изучение и использование языка разработчиками и способствует развитию экосистемы. Go - императивный или декларативный? А в чем разница?Go - императивный язык программирования. Это означает, что в нем используются инструкции, которые описывают, как выполнять задачу. В декларативных языках программирования, например, SQL, описывается, что должно быть сделано, а не как это сделать. Какие особенности Go вы можете назвать? Статическая типизация Сборка мусора Конкурентность Параллелизм Отсутствие исключений Строгая типизация Строгая проверка ошибок Почему треды в Go - легковесныеВ Go горутины - это легковесные потоки, управляемые средой выполнения Go. Они более легковесны, чем потоки операционной системы, потому что занимают меньше места в памяти, обычно около 2 килобайт, по сравнению с памятью потока операционной системы, которая может составлять несколько мегабайт. Такой меньший объем памяти позволяет среде выполнения Go создавать большое количество горутин, часто тысячи или даже миллионы, не исчерпывая системных ресурсов. Кроме того, среда выполнения Go использует планировщик, чтобы мультиплексировать горутины на меньшее число потоков операционной системы, что позволяет снизить накладные расходы на создание и управление потоками. Планировщик также может выполнять контекстные переключения между горутинами без участия операционной системы, что может быть быстрее, чем полное контекстное переключение между потоками операционной системы. В целом, сочетание меньшего объема памяти и планировщика пользовательского пространства делает горутины легким и эффективным механизмом для параллельного выполнения в программах на Go. Какие средства обобщенного программирования есть в Go?В Go 1.18 появилась поддержка обобщенного программирования. Обобщенное программирование - это способность писать функции и типы, которые работают с любыми типами данных, а не только с конкретными типами данных. В Go 1.18 обобщенное программирование реализовано с помощью параметризованных типов и функций. Какие средства метапрограммирования есть в Go?В Go нет средств метапрограммирования, таких как макросы, шаблоны. Вместо этого Go предоставляет мощную систему интерфейсов, которая позволяет писать гибкий и расширяемый код, который может быть легко адаптирован к различным типам данных. Какая сортировка используется в Golang?В Go используется алгоритм сортировки “Quicksort”, который является эффективным алгоритмом сортировки с асимптотической сложностью O(n log n). Этот алгоритм используется в стандартной библиотеке “sort” для сортировки слайсов и пользовательских коллекций данных. Какая кодировка используется в Golang?Go поддерживает UTF-8 кодировку по умолчанию для всех строковых типов. Это означает, что вы можете безопасно использовать Unicode символы в строках в Go. Библиотека “unicode/utf8” предоставляет функции для работы с UTF-8 кодированными строками. Можно ли в Golang создать статический метод?В Go нет классов и, следовательно, нет статических методов в традиционном понимании этого термина, как в языках, таких как Java или C++. Однако, вы можете создать функции, которые привязаны к определенному типу данных, что близко к понятию статического метода. Вот пример: 1234567type MyType struct &#123; value int&#125;func (t MyType) StaticMethod() int &#123; return t.value * 2&#125; В этом примере StaticMethod является функцией, которая привязана к типу MyType. Вы можете вызвать эту функцию на экземпляре MyType. 12t := MyType&#123;value: 5&#125;result := t.StaticMethod() // result is 10 Это не совсем то же самое, что статический метод в языках с классами, но это ближайший аналог в Go.","categories":[{"name":"Golang","slug":"Golang","permalink":"https://goxpert.ru/categories/Golang/"},{"name":"Старт","slug":"Golang/Старт","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/"},{"name":"Вопрос-Ответ","slug":"Вопрос-Ответ","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/"},{"name":"Общие","slug":"Вопрос-Ответ/Общие","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/%D0%9E%D0%B1%D1%89%D0%B8%D0%B5/"},{"name":"Общие","slug":"Golang/Старт/Общие","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/%D0%9E%D0%B1%D1%89%D0%B8%D0%B5/"}],"tags":[{"name":"Golang, Q&A","slug":"Golang-Q-A","permalink":"https://goxpert.ru/tags/Golang-Q-A/"}]},{"title":"С 1 Июня 2024!","slug":"helloworld","date":"2024-06-01T07:00:00.000Z","updated":"2024-06-01T08:55:15.393Z","comments":true,"path":"2024/06/01/helloworld/","link":"","permalink":"https://goxpert.ru/2024/06/01/helloworld/","excerpt":"","text":"Добрый день! Сегодня родился сайт GoXpert. Для чего нужен этот сайт: Во-первых, для меня. Да, меня зовут Дмитрий Сигаев. Это сайт, на мой взгляд, поможет мне структурировать свои знания в разных областях, но в основном в экосистеме GO. Я много, что умею, но не могу в нужный для меня момент вынуть из своей головы нужной информации. Данный сайт — это так называемое хранилище моего опыта и якорей для быстрой настройки кратковременной памяти :) Во-вторых, если это полезно для меня, то, на мой взгляд, найдется тот, кому это сайт тоже поможет в чем-то разобраться… В-третьих, хочу выразить благодарность Сергею Артамонову. Спасибо за второй шанс и последствие в виде данного сайта. Надеюсь, быть его падаваном и соавтором публикаций на данном сайта. Ладно, не будем терять времени… поехали… Let’s GO!","categories":[{"name":"Golang","slug":"Golang","permalink":"https://goxpert.ru/categories/Golang/"},{"name":"Старт","slug":"Golang/Старт","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/"}],"tags":[{"name":"Golang","slug":"Golang","permalink":"https://goxpert.ru/tags/Golang/"}]}],"categories":[{"name":"Golang","slug":"Golang","permalink":"https://goxpert.ru/categories/Golang/"},{"name":"Старт","slug":"Golang/Старт","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/"},{"name":"Вопрос-Ответ","slug":"Вопрос-Ответ","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/"},{"name":"Generics","slug":"Вопрос-Ответ/Generics","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/Generics/"},{"name":"Generics","slug":"Golang/Старт/Generics","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/Generics/"},{"name":"Select-case","slug":"Вопрос-Ответ/Select-case","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/Select-case/"},{"name":"Select-case","slug":"Golang/Старт/Select-case","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/Select-case/"},{"name":"Panic","slug":"Вопрос-Ответ/Panic","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/Panic/"},{"name":"Panic","slug":"Golang/Старт/Panic","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/Panic/"},{"name":"Defer","slug":"Вопрос-Ответ/Defer","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/Defer/"},{"name":"Defer","slug":"Golang/Старт/Defer","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/Defer/"},{"name":"Пакеты","slug":"Вопрос-Ответ/Пакеты","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/%D0%9F%D0%B0%D0%BA%D0%B5%D1%82%D1%8B/"},{"name":"Пакеты","slug":"Golang/Старт/Пакеты","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/%D0%9F%D0%B0%D0%BA%D0%B5%D1%82%D1%8B/"},{"name":"Общие","slug":"Вопрос-Ответ/Общие","permalink":"https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/%D0%9E%D0%B1%D1%89%D0%B8%D0%B5/"},{"name":"Общие","slug":"Golang/Старт/Общие","permalink":"https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/%D0%9E%D0%B1%D1%89%D0%B8%D0%B5/"}],"tags":[{"name":"Golang, Q&A","slug":"Golang-Q-A","permalink":"https://goxpert.ru/tags/Golang-Q-A/"},{"name":"Golang","slug":"Golang","permalink":"https://goxpert.ru/tags/Golang/"}]}