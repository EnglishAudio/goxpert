<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:yandex="http://news.yandex.ru"
     xmlns:media="http://search.yahoo.com/mrss/"
     xmlns:turbo="http://turbo.yandex.ru"
     version="2.0">
  <channel>
    <title>GoXpert.ru</title>
    <link>https://goxpert.ru/</link>
    <description>Секреты Golang. Архитектура и дизайн приложений на GO. Всё о GO изнутри</description>
    <turbo:analytics type="Yandex"
                 id="86613025">    <!-- https://yandex.ru/dev/turbo/doc/settings/analytics.html#analytics__rss-1 -->
    </turbo:analytics>    
    
    
    <item turbo="true">
      <turbo:extendedHtml>true</turbo:extendedHtml>
      <turbo:source>https://goxpert.ru/2024/06/01/types/structs/</turbo:source>
      <turbo:topic>Структуры</turbo:topic>
      <title>Структуры</title>
      <link>https://goxpert.ru/2024/06/01/types/structs/</link>
      <pubDate>Sat, 01 Jun 2024 07:10:00 GMT</pubDate>
       
      <yandex:related type="infinity">
         
        <link url="https://goxpert.ru/2024/06/01/types/strings/">Следующая статья: Строки</link>
        
        
        
      </yandex:related>
      
      
      <turbo:content><![CDATA[<h2 id="Имеет-ли-значение-порядок-полей-в-структуре"><a href="#Имеет-ли-значение-порядок-полей-в-структуре" class="headerlink" title="Имеет ли значение порядок полей в структуре?"></a>Имеет ли значение порядок полей в структуре?</h2><p>Да, порядок полей в структуре Go может иметь значение в некоторых случаях.</p><p>Выравнивание памяти: Go размещает поля структур в соответствии с гарантиями выравнивания для типов полей. Это может влиять на общий размер структуры и использование памяти.</p><p>Источники: </p><ul><li><a href="https://ru.stackoverflow.com/questions/1541584/%d0%9f%d0%be%d1%80%d1%8f%d0%b4%d0%be%d0%ba-%d0%bf%d0%b5%d1%80%d0%b5%d0%bc%d0%bd%d0%bd%d1%8b%d1%85-%d0%b2-%d1%81%d1%82%d1%80%d1%83%d0%ba%d1%82%d1%83%d1%80%d0%b5-go-golang">Stackoverflow</a></li></ul><h2 id="От-чего-зависит-размер-выравнивания-в-структуре"><a href="#От-чего-зависит-размер-выравнивания-в-структуре" class="headerlink" title="От чего зависит размер выравнивания в структуре?"></a>От чего зависит размер выравнивания в структуре?</h2><p>Размер выравнивания в структуре в Go зависит от нескольких факторов:</p><ul><li>Тип данных: Размер выравнивания обычно зависит от типа данных. Например, int32 требует выравнивания по 4 байтам.</li><li>Порядок полей: Порядок полей в структуре может влиять на размер выравнивания. Если поля структуры переставить, размер структуры может измениться.</li><li>Архитектура системы: Размер выравнивания также может зависеть от архитектуры системы. Например, на 32-битной архитектуре структуры выравниваются под 4 байта.</li></ul><p>Важно отметить, что выравнивание влияет на производительность и использование памяти, поэтому его следует учитывать при проектировании структур.</p><p><img src="/images/golang_struct.jpg" alt="Вот вам и struct"></p> ]]></turbo:content>
      
     </item>
    
    <item turbo="true">
      <turbo:extendedHtml>true</turbo:extendedHtml>
      <turbo:source>https://goxpert.ru/2024/06/01/types/strings/</turbo:source>
      <turbo:topic>Строки</turbo:topic>
      <title>Строки</title>
      <link>https://goxpert.ru/2024/06/01/types/strings/</link>
      <pubDate>Sat, 01 Jun 2024 07:09:00 GMT</pubDate>
       
      <yandex:related type="infinity">
        
         
        <link url="https://goxpert.ru/2024/06/01/types/structs/">Предыдущая статья: Структуры</link>
        <link url="https://goxpert.ru/2024/06/01/types/array-slice/">Следующая статья: Массивы и слайсы</link>
        
        
      </yandex:related>
      
      
      <turbo:content><![CDATA[<h2 id="Что-такое-string-или-строки"><a href="#Что-такое-string-или-строки" class="headerlink" title="Что такое string или строки?"></a>Что такое string или строки?</h2><p>Строка в golang - это последовательность символов, которая представляет собой текстовые данные.<br>Строки в golang объявляются с типом string и заключаются в двойные кавычки, например:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s <span class="keyword">string</span> = <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="comment">// или сокращенная запись</span></span><br><span class="line">s := <span class="string">&quot;hey&quot;</span></span><br></pre></td></tr></table></figure><p>Строки в golang являются неизменяемыми, то есть их нельзя модифицировать после создания. Однако, можно создавать новые строки из существующих, используя различные операции и функции. </p><p>Например, можно склеивать строки с помощью оператора +, сравнивать строки с помощью оператора ==, или применять функции из пакета <code>strings</code> для поиска, замены, преобразования и других манипуляций со строками.</p><p>Строки в golang хранят символы в кодировке UTF-8, которая поддерживает множество языков и специальных символов.</p><p>Каждый символ в строке называется руной (<code>rune</code>), которая является псевдонимом для типа <code>int32</code>. Руны можно получать из строк с помощью цикла for-range или функции range, а также преобразовывать в строки с помощью функции <code>string</code>.</p><p>Источники: </p><ul><li><a href="https://www.programiz.com/golang/string">Programiz</a></li><li><a href="https://www.digitalocean.com/community/tutorials/an-introduction-to-the-strings-package-in-go-ru">DigitalOcean</a></li></ul><h2 id="Какие-особенности-есть-у-string"><a href="#Какие-особенности-есть-у-string" class="headerlink" title="Какие особенности есть у string?"></a>Какие особенности есть у string?</h2><p>Строка в golang - это неизменяемая последовательность символов в кодировке UTF-8, которая представляет собой текстовые данные. Строки в golang имеют тип <code>string</code> и заключаются в двойные кавычки или обратные апострофы. Строки в golang поддерживают множество языков и специальных символов, включая русские буквы и эмодзи. </p><p>Строки в golang можно объединять, сравнивать, искать, заменять, преобразовывать и выполнять другие манипуляции с помощью различных функций из пакета <code>strings</code>. Строки в golang также можно преобразовывать в руны (кодовые значения символов) и байты (единицы хранения данных) для более низкоуровневой работы с текстом</p><ul><li><a href="https://golangify.com/string">Golangify</a></li></ul><h2 id="Как-устроена-строка-внутри-а-точнее-reflect-String-и-reflect-StringHeader"><a href="#Как-устроена-строка-внутри-а-точнее-reflect-String-и-reflect-StringHeader" class="headerlink" title="Как устроена строка внутри, а точнее reflect.String и reflect.StringHeader?"></a>Как устроена строка внутри, а точнее reflect.String и reflect.StringHeader?</h2><p>reflect.String - это псевдоним для типа string, который является неизменяемой последовательностью символов в кодировке UTF-8. </p><p>reflect.StringHeader - это структура, которая содержит два поля: Data и Len. Data - это указатель на первый байт строки, а Len - это длина строки в байтах. Структура reflect.StringHeader может быть получена из строки с помощью функции unsafe.Pointer, которая преобразует любое значение в указатель безопасного типа. Например, можно использовать такой код:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s := <span class="string">&quot;hello&quot;</span></span><br><span class="line">sh := (*reflect.StringHeader)(unsafe.Pointer(&amp;s))</span><br><span class="line">fmt.Println(sh.Data, sh.Len) <span class="comment">// выводит адрес и длину строки</span></span><br></pre></td></tr></table></figure><p>Структура reflect.StringHeader может быть также использована для создания новой строки из существующей, изменяя ее указатель или длину. Например, можно использовать такой код:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s := <span class="string">&quot;hello, world!&quot;</span></span><br><span class="line">sh := (*reflect.StringHeader)(unsafe.Pointer(&amp;s))</span><br><span class="line">sh.Data += <span class="number">7</span> <span class="comment">// сдвигаем указатель на 7 байтов</span></span><br><span class="line">sh.Len -= <span class="number">7</span> <span class="comment">// уменьшаем длину на 7 байтов</span></span><br><span class="line">fmt.Println(s) <span class="comment">// выводит &quot;world!&quot;</span></span><br></pre></td></tr></table></figure><p>Однако, такое использование reflect.StringHeader может быть опасным, так как оно нарушает неизменяемость строк и может привести к непредвиденным ошибкам или поведению. Например, если мы изменим длину строки больше, чем ее емкость, то мы можем получить доступ к памяти, которая не принадлежит строке, и вызвать панику или нарушение сегментации. Также, если мы изменим указатель на данные, то мы можем потерять ссылку на оригинальную строку и вызвать утечку памяти или сборку мусора.</p><p>Поэтому, reflect.String и reflect.StringHeader следует использовать с осторожностью и только в тех случаях, когда это необходимо для решения конкретной задачи. В большинстве случаев, можно обойтись стандартными функциями и методами для работы со строками в golang.</p><p><img src="/images/golang_string.jpg" alt="Вот вам и string"></p> ]]></turbo:content>
      
     </item>
    
    <item turbo="true">
      <turbo:extendedHtml>true</turbo:extendedHtml>
      <turbo:source>https://goxpert.ru/2024/06/01/types/array-slice/</turbo:source>
      <turbo:topic>Массивы и слайсы</turbo:topic>
      <title>Массивы и слайсы</title>
      <link>https://goxpert.ru/2024/06/01/types/array-slice/</link>
      <pubDate>Sat, 01 Jun 2024 07:08:00 GMT</pubDate>
       
      <yandex:related type="infinity">
        
         
        <link url="https://goxpert.ru/2024/06/01/types/strings/">Предыдущая статья: Строки</link>
        <link url="https://goxpert.ru/2024/06/01/common/generics/">Следующая статья: Дженерики</link>
        
        
      </yandex:related>
      
      
      <turbo:content><![CDATA[<h2 id="Что-такое-слайс"><a href="#Что-такое-слайс" class="headerlink" title="Что такое слайс?"></a>Что такое слайс?</h2><p>Слайс в golang - это динамический массив, который может хранить элементы одного типа. Слайс имеет нефиксированную длину, которая может изменяться в процессе работы с ним. Слайс также имеет вместимость, которая определяет, сколько элементов может поместиться в слайс без выделения новой памяти. Слайс можно создавать из массивов, с помощью функции make или литералов слайсов.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> slice <span class="keyword">struct</span> &#123;</span><br><span class="line">array unsafe.Pointer</span><br><span class="line"><span class="built_in">len</span>   <span class="keyword">int</span></span><br><span class="line"><span class="built_in">cap</span>   <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Слайс можно считать как ссылку на массив, который содержит элементы слайса.<br>Слайс состоит из трех полей: указателя на первый элемент массива, длины слайса и вместимости слайса.<br>Слайс можно передавать в функции по значению, но при этом изменение элементов слайса в функции отразится на исходном слайсе, так как они ссылаются на один и тот же массив.</p><p>Слайсом можно манипулировать с помощью различных операций и функций. Например, можно получать подслайсы с помощью оператора [:], добавлять элементы в конец слайса с помощью функции append, копировать элементы из одного слайса в другой с помощью функции copy, сортировать элементы слайса с помощью функции sort, и так далее.</p><h2 id="Чем-массив-отличается-от-слайса"><a href="#Чем-массив-отличается-от-слайса" class="headerlink" title="Чем массив отличается от слайса?"></a>Чем массив отличается от слайса?</h2><p>Массив и слайс в golang - это структуры данных, которые могут хранить элементы одного типа. Однако, между ними есть несколько отличий:</p><ul><li>Массив имеет фиксированный размер, который определяется при его создании. Слайс имеет переменную длину, которая может изменяться в процессе работы с ним.</li><li>Массив является значением, а слайс - ссылкой. При передаче массива в функцию или присваивании его другой переменной, происходит копирование всех его элементов. При передаче слайса в функцию или присваивании его другой переменной, происходит копирование только его заголовка, а не элементов.</li><li>Массив можно сравнивать с другим массивом того же размера и типа с помощью оператора ==. Слайс нельзя сравнивать с другим слайсом с помощью оператора ==, только с nil.</li><li>Массив можно инициализировать с помощью литерала массива, указав его размер и элементы в фигурных скобках. Слайс можно инициализировать с помощью литерала слайса, не указывая его размер, или с помощью функции make, указав его длину и вместимость</li></ul><h2 id="Как-работает-append"><a href="#Как-работает-append" class="headerlink" title="Как работает append?"></a>Как работает append?</h2><p>Функция append в golang позволяет добавлять элементы в конец слайса, увеличивая его длину и вместимость при необходимости. Функция append принимает слайс и один или несколько элементов того же типа, что и слайс, и возвращает новый слайс, содержащий все элементы исходного слайса и добавленные элементы. </p><p>Например:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125; <span class="comment">// создаем слайс из трех элементов</span></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="number">4</span>, <span class="number">5</span>) <span class="comment">// добавляем два элемента в конец слайса</span></span><br><span class="line">fmt.Println(s) <span class="comment">// выводит [1 2 3 4 5]</span></span><br></pre></td></tr></table></figure><p>Функция append может также принимать другой слайс в качестве аргумента, если он заключен в оператор … Это позволяет объединять два слайса в один. </p><p>Например:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1 := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125; <span class="comment">// создаем первый слайс</span></span><br><span class="line">s2 := []<span class="keyword">int</span>&#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125; <span class="comment">// создаем второй слайс</span></span><br><span class="line">s3 := <span class="built_in">append</span>(s1, s2...) <span class="comment">// добавляем второй слайс в конец первого слайса</span></span><br><span class="line">fmt.Println(s3) <span class="comment">// выводит [1 2 3 4 5 6]</span></span><br></pre></td></tr></table></figure><p>Функция append работает таким образом, что если вместимость исходного слайса достаточна для добавления новых элементов, то она просто копирует их в свободное пространство массива, на который ссылается слайс. </p><p>Если же вместимость исходного слайса недостаточна, то функция append выделяет новый массив большего размера, копирует в него все элементы исходного слайса и добавляет новые элементы. Затем функция append возвращает новый слайс, который ссылается на новый массив.</p><h2 id="До-какого-размера-можно-увеличивать-слайс"><a href="#До-какого-размера-можно-увеличивать-слайс" class="headerlink" title="До какого размера можно увеличивать слайс?"></a>До какого размера можно увеличивать слайс?</h2><p>Размер слайса в golang ограничен только доступной памятью в системе. Однако, при увеличении размера слайса с помощью функции append, может происходить перевыделение памяти, если вместимость исходного слайса недостаточна для добавления новых элементов. При этом, функция append выделяет новый массив большего размера, копирует в него все элементы исходного слайса и добавляет новые элементы. Затем функция append возвращает новый слайс, который ссылается на новый массив.</p><p>При перевыделении памяти, функция append следует определенной стратегии, чтобы избежать частого копирования и минимизировать оверхед. При текущем размере слайса менее 256 элементов, размер памяти увеличивается вдвое (вне зависимости от запрашиваемой cap). При размере слайса больше 256 элементов, слайс увеличивается на четверть текущего размера.</p><p>Например:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">s := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>, <span class="number">5</span>) <span class="comment">// создаем слайс с длиной 0 и вместимостью 5</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(s), <span class="built_in">cap</span>(s)) <span class="comment">// выводит 0 5</span></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>) <span class="comment">// добавляем 5 элементов в слайс</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(s), <span class="built_in">cap</span>(s)) <span class="comment">// выводит 5 5</span></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="number">6</span>) <span class="comment">// добавляем еще один элемент в слайс</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(s), <span class="built_in">cap</span>(s)) <span class="comment">// выводит 6 10 - вместимость увеличилась вдвое</span></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>) <span class="comment">// добавляем еще 4 элемента в слайс</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(s), <span class="built_in">cap</span>(s)) <span class="comment">// выводит 10 10</span></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="number">11</span>) <span class="comment">// добавляем еще один элемент в слайс</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(s), <span class="built_in">cap</span>(s)) <span class="comment">// выводит 11 20 - вместимость увеличилась вдвое</span></span><br></pre></td></tr></table></figure><h2 id="Берем-от-слайса-слайс-куда-будет-указывать-его-указатель"><a href="#Берем-от-слайса-слайс-куда-будет-указывать-его-указатель" class="headerlink" title="Берем от слайса слайс, куда будет указывать его указатель?"></a>Берем от слайса слайс, куда будет указывать его указатель?</h2><p>Если мы берем от слайса слайс, то его указатель будет указывать на тот же массив, что и указатель исходного слайса, но с другим смещением. Например, если мы имеем слайс s, который ссылается на массив [1, 2, 3, 4, 5], и мы берем от него подслайс s[1:3], то его указатель будет указывать на тот же массив, но с элемента 2. То есть, подслайс будет содержать элементы [2, 3] из исходного массива.</p><p>Это означает, что если мы изменим элементы подслайса, то это отразится на исходном слайсе и наоборот, так как они ссылаются на один и тот же массив. Однако, если мы добавим элементы в подслайс с помощью функции append, то это может привести к перевыделению памяти и созданию нового массива, если вместимость подслайса недостаточна. В этом случае, подслайс будет ссылаться на новый массив, а исходный слайс - на старый.</p><h2 id="В-чем-разница-между-слайсом-указателей-и-слайсом-значений-с-точки-зрения-вызова-функции"><a href="#В-чем-разница-между-слайсом-указателей-и-слайсом-значений-с-точки-зрения-вызова-функции" class="headerlink" title="В чем разница между слайсом указателей и слайсом значений с точки зрения вызова функции?"></a>В чем разница между слайсом указателей и слайсом значений с точки зрения вызова функции?</h2><p>Разница между слайсом указателей и слайсом значений с точки зрения вызова функции заключается в том, как они передаются и изменяются внутри функции. </p><p>Слайс указателей - это слайс, который содержит указатели на элементы другого типа, например:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sp []*<span class="keyword">int</span> <span class="comment">// слайс указателей на int</span></span><br></pre></td></tr></table></figure><p>Слайс значений - это слайс, который содержит элементы другого типа, например:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sv []<span class="keyword">int</span> <span class="comment">// слайс значений int</span></span><br></pre></td></tr></table></figure><p>Когда мы передаем слайс указателей в функцию, мы копируем только заголовок слайса, который содержит указатель на первый элемент, длину и вместимость.</p><p>Однако, сами элементы слайса, на которые указывают указатели, не копируются. Это означает, что если мы изменяем элементы слайса в функции, то это отразится на исходном слайсе, так как они ссылаются на одни и те же значения. Например:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  x := <span class="number">1</span></span><br><span class="line">  y := <span class="number">2</span></span><br><span class="line">  z := <span class="number">3</span></span><br><span class="line">  sp := []*<span class="keyword">int</span>&#123;&amp;x, &amp;y, &amp;z&#125; <span class="comment">// создаем слайс указателей</span></span><br><span class="line">  fmt.Println(*sp[<span class="number">0</span>], *sp[<span class="number">1</span>], *sp[<span class="number">2</span>]) <span class="comment">// выводит 1 2 3</span></span><br><span class="line">  modifySlicePointers(sp) <span class="comment">// передаем слайс в функцию</span></span><br><span class="line">  fmt.Println(*sp[<span class="number">0</span>], *sp[<span class="number">1</span>], *sp[<span class="number">2</span>]) <span class="comment">// выводит 10 20 30</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">modifySlicePointers</span><span class="params">(sp []*<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">  *sp[<span class="number">0</span>] = <span class="number">10</span> <span class="comment">// изменяем значение, на которое указывает первый элемент слайса</span></span><br><span class="line">  *sp[<span class="number">1</span>] = <span class="number">20</span> <span class="comment">// изменяем значение, на которое указывает второй элемент слайса</span></span><br><span class="line">  *sp[<span class="number">2</span>] = <span class="number">30</span> <span class="comment">// изменяем значение, на которое указывает третий элемент слайса</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Когда мы передаем слайс значений в функцию, мы также копируем только заголовок слайса, который содержит указатель на первый элемент, длину и вместимость. Однако, сами элементы слайса, на которые указывает указатель, также не копируются. Это означает, что если мы изменяем элементы слайса в функции, то это также отразится на исходном слайсе, так как они ссылаются на одни и те же значения. Например:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  sv := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125; <span class="comment">// создаем слайс значений</span></span><br><span class="line">  fmt.Println(sv[<span class="number">0</span>], sv[<span class="number">1</span>], sv[<span class="number">2</span>]) <span class="comment">// выводит 1 2 3</span></span><br><span class="line">  modifySliceValues(sv) <span class="comment">// передаем слайс в функцию</span></span><br><span class="line">  fmt.Println(sv[<span class="number">0</span>], sv[<span class="number">1</span>], sv[<span class="number">2</span>]) <span class="comment">// выводит 10 20 30</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">modifySliceValues</span><span class="params">(sv []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">  sv[<span class="number">0</span>] = <span class="number">10</span> <span class="comment">// изменяем значение первого элемента слайса</span></span><br><span class="line">  sv[<span class="number">1</span>] = <span class="number">20</span> <span class="comment">// изменяем значение второго элемента слайса</span></span><br><span class="line">  sv[<span class="number">2</span>] = <span class="number">30</span> <span class="comment">// изменяем значение третьего элемента слайса</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Стоит быть внимательным при добавлении элементов в слайс в функции с помощью <code>append</code>, так как мы изменяем копию структуры слайса. В этом случае, слайс в функции будет иметь другие значния len, cap и, возможно, ссылки на массив. Это означает, что добавленные элементы не будут видны в исходном слайсе. Например:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  sv := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125; <span class="comment">// создаем слайс значений</span></span><br><span class="line">  appendSliceValues(sv) <span class="comment">// передаем слайс в функцию</span></span><br><span class="line">  fmt.Println(sv) <span class="comment">// выводит [1 2 3]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">appendSliceValues</span><span class="params">(sv []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">  sv = <span class="built_in">append</span>(sv, <span class="number">4</span>) <span class="comment">// добавляем элемент в слайс</span></span><br><span class="line">  fmt.Println(sv) <span class="comment">// выводит [1 2 3 4]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Если мы хотим, чтобы добавленные элементы сохранялись в исходном слайсе, мы должны возвращать слайс из функции и присваивать его исходному слайсу. Например:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  sv := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125; <span class="comment">// создаем слайс значений</span></span><br><span class="line">  sv = appendSliceValues(sv) <span class="comment">// передаем слайс в функцию и присваиваем его исходному слайсу</span></span><br><span class="line">  fmt.Println(sv) <span class="comment">// выводит [1 2 3 4]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">appendSliceValues</span><span class="params">(sv []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">  sv = <span class="built_in">append</span>(sv, <span class="number">4</span>) <span class="comment">// добавляем элемент в слайс</span></span><br><span class="line">  <span class="keyword">return</span> sv <span class="comment">// возвращаем слайс из функции</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Какие-есть-ограничения-при-работе-со-слайсом"><a href="#Какие-есть-ограничения-при-работе-со-слайсом" class="headerlink" title="Какие есть ограничения при работе со слайсом?"></a>Какие есть ограничения при работе со слайсом?</h2><p>При работе со слайсом есть некоторые ограничения, которые нужно учитывать:</p><ul><li>Слайс не может содержать элементы разных типов, только одного. Для хранения элементов разных типов нужно использовать структуры, интерфейсы или пустые интерфейсы (interface{}).</li><li>Слайс не может быть сравнен с другим слайсом с помощью оператора ==, только с nil. Для сравнения двух слайсов нужно использовать цикл или функцию reflect.DeepEqual.</li><li>Слайс не может быть использован в качестве ключа мапы, так как он не является хешируемым типом. Для использования слайса в качестве ключа мапы нужно преобразовать его в строку или другой хешируемый тип.</li><li>Слайс не может быть константой, так как он является ссылочным типом. Для объявления слайса нужно использовать var, := или make.</li><li>Слайс не может быть безопасно передан в функцию или возвращен из функции, так как он ссылается на массив, который может быть изменен в другом месте. Для безопасной передачи или возврата слайса нужно копировать его элементы в новый слайс с помощью функции copy или среза [:].</li></ul><h2 id="С-какой-скоростью-идет-поиск-в-массиве-и-почему"><a href="#С-какой-скоростью-идет-поиск-в-массиве-и-почему" class="headerlink" title="С какой скоростью идет поиск в массиве и почему?"></a>С какой скоростью идет поиск в массиве и почему?</h2><p>Самый простой алгоритм поиска в массиве - это линейный поиск, который перебирает все элементы массива по порядку, пока не найдет искомый элемент или не дойдет до конца массива.</p><p>Скорость линейного поиска пропорциональна длине массива, то есть чем больше элементов в массиве, тем дольше будет идти поиск. Сложность линейного поиска в худшем случае составляет O(n), где n - это количество элементов в массиве.</p><h2 id="Какая-есть-функции-для-создания-слайса-с-длиной-отличной-от-нуля"><a href="#Какая-есть-функции-для-создания-слайса-с-длиной-отличной-от-нуля" class="headerlink" title="Какая есть функции для создания слайса с длиной отличной от нуля?"></a>Какая есть функции для создания слайса с длиной отличной от нуля?</h2><p>Для создания слайса с длиной отличной от нуля в golang, можно использовать одну из следующих функций:</p><p>Функция make, которая принимает тип слайса, длину и вместимость, и возвращает слайс с заданными параметрами. Например:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">3</span>, <span class="number">5</span>) <span class="comment">// создает слайс из трех целых чисел с вместимостью пять</span></span><br></pre></td></tr></table></figure><p>Функция append, которая принимает слайс и один или несколько элементов того же типа, что и слайс, и возвращает новый слайс, содержащий все элементы исходного слайса и добавленные элементы. Например:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s := []<span class="keyword">int</span>&#123;&#125; <span class="comment">// создает пустой слайс</span></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">// добавляет три элемента в слайс</span></span><br></pre></td></tr></table></figure><p>Литерал слайса, который позволяет инициализировать слайс с помощью фигурных скобок и перечисления элементов. Например:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125; <span class="comment">// создает слайс из трех целых чисел</span></span><br></pre></td></tr></table></figure><h2 id="Допустима-ли-конкуррентная-работа-со-слайсом"><a href="#Допустима-ли-конкуррентная-работа-со-слайсом" class="headerlink" title="Допустима ли конкуррентная работа со слайсом?"></a>Допустима ли конкуррентная работа со слайсом?</h2><p>Такая работа может быть допустима, если соблюдены определенные условия и предосторожности:</p><ul><li>Во-первых, конкуррентное чтение слайса не представляет опасности, если никто не пишет в слайс в то же время. То есть, можно безопасно читать слайс из нескольких горутин, если слайс не изменяется.</li><li>Во-вторых, конкуррентная запись в слайс может привести к гонке данных (data race), если не использовать синхронизацию или атомарные операции.</li></ul><p>Для предотвращения гонки данных, можно использовать один из следующих способов:</p><ul><li>Использовать мьютекс sync.Mutex или sync.RWMutex для защиты слайса от одновременного доступа. </li><li>Использовать атомарные операции (sync/atomic) для изменения отдельных элементов слайса.</li><li>Использовать каналы для передачи слайса между горутинами.</li></ul><p><img src="/images/golang_slices.jpg" alt="Вот вам и slices"></p> ]]></turbo:content>
      
     </item>
    
    <item turbo="true">
      <turbo:extendedHtml>true</turbo:extendedHtml>
      <turbo:source>https://goxpert.ru/2024/06/01/common/generics/</turbo:source>
      <turbo:topic>Дженерики</turbo:topic>
      <title>Дженерики</title>
      <link>https://goxpert.ru/2024/06/01/common/generics/</link>
      <pubDate>Sat, 01 Jun 2024 07:07:00 GMT</pubDate>
       
      <yandex:related type="infinity">
        
         
        <link url="https://goxpert.ru/2024/06/01/types/array-slice/">Предыдущая статья: Массивы и слайсы</link>
        <link url="https://goxpert.ru/2024/06/01/common/constructions/">Следующая статья: Конструкции</link>
        
        
      </yandex:related>
      
      
      <turbo:content><![CDATA[<h2 id="Чем-кодогенерация-отличается-от-дженериков"><a href="#Чем-кодогенерация-отличается-от-дженериков" class="headerlink" title="Чем кодогенерация отличается от дженериков?"></a>Чем кодогенерация отличается от дженериков?</h2><p>Кодогенерация и дженерики - это два способа написания кода, который не зависит от конкретных типов данных. Однако, они отличаются по тому, когда и как происходит привязка к типам.</p><p>Кодогенерация - это процесс создания кода из другого кода или данных с помощью специальных инструментов или команд. Кодогенерация позволяет писать обобщенный код, который затем преобразуется в конкретный код для каждого типа данных. Кодогенерация происходит на этапе компиляции или до него, то есть до выполнения программы. Кодогенерация может быть полезна для увеличения производительности, избежания дублирования кода или реализации сложной логики.</p><p>Дженерики - это способ написания кода, который параметризован по типам данных. Дженерики позволяют писать функции и типы, которые работают с любыми типами данных, передавая их в качестве аргументов. Дженерики происходят на этапе выполнения, то есть во время работы программы. Дженерики могут быть полезны для повышения выразительности, уменьшения количества кода или поддержки полиморфизма.</p><h2 id="В-какой-версии-появились-дженерики"><a href="#В-какой-версии-появились-дженерики" class="headerlink" title="В какой версии появились дженерики?"></a>В какой версии появились дженерики?</h2><p>В языке Go до версии 1.18 не было поддержки дженериков, поэтому разработчики часто использовали кодогенерацию или рефлексию для написания обобщенного кода. </p><p>В версии 1.18 добавлена поддержка дженериков с помощью параметров типов (type parameters), которые позволяют определять функции и типы, которые принимают любые типы данных в качестве аргументов.</p><h2 id="Как-работают-дженерики-под-капотом"><a href="#Как-работают-дженерики-под-капотом" class="headerlink" title="Как работают дженерики под капотом?"></a>Как работают дженерики под капотом?</h2><p>Дженерики под капотом в golang работают с помощью механизма, который называется type substitution (подстановка типов). Это означает, что при компиляции программы, компилятор заменяет параметры типов в дженерических функциях и типах на конкретные типы, которые передаются в качестве аргументов. </p><p>Например, если мы имеем такую дженерическую функцию:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Map</span>[<span class="title">F</span>, <span class="title">T</span> <span class="title">any</span>]<span class="params">(s T, f F)</span> []<span class="title">T</span></span> &#123;</span><br><span class="line">  r := <span class="built_in">make</span>([]T, <span class="built_in">len</span>(s))</span><br><span class="line">  <span class="keyword">for</span> i, v := <span class="keyword">range</span> s &#123;</span><br><span class="line">    r[i] = f(v)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>И мы вызываем ее так:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">f := <span class="function"><span class="keyword">func</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">string</span></span> &#123; <span class="keyword">return</span> strconv.Itoa(x) &#125;</span><br><span class="line">t := Map(s, f)</span><br></pre></td></tr></table></figure><p>То компилятор преобразует ее в такую функцию:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Map_int_string</span><span class="params">(s []<span class="keyword">int</span>, f <span class="keyword">func</span>(<span class="keyword">int</span>)</span> <span class="title">string</span>) []<span class="title">string</span></span> &#123;</span><br><span class="line">  r := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="built_in">len</span>(s))</span><br><span class="line">  <span class="keyword">for</span> i, v := <span class="keyword">range</span> s &#123;</span><br><span class="line">    r[i] = f(v)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>И вызывает ее так:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">f := <span class="function"><span class="keyword">func</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">string</span></span> &#123; <span class="keyword">return</span> strconv.Itoa(x) &#125;</span><br><span class="line">t := Map_int_string(s, f)</span><br></pre></td></tr></table></figure><pre><code>                                                                          2</code></pre><p>Таким образом, дженерики под капотом в golang не требуют дополнительной памяти или рефлексии, так как они превращаются в обычный код для каждого типа данных. </p><p>Однако, это также означает, что дженерики под капотом в golang могут привести к увеличению размера исполняемого файла, так как для каждого типа данных создается своя версия дженерической функции или типа</p><p>Источники: </p><ul><li><a href="https://habr.com/ru/companies/karuna/articles/552944/">Habr</a></li><li><a href="https://habr.com/ru/companies/skillfactory/articles/657853/">Habr</a></li></ul><p><img src="/images/golang_generics.jpg" alt="Вот вам и дженерик"></p> ]]></turbo:content>
      
     </item>
    
    <item turbo="true">
      <turbo:extendedHtml>true</turbo:extendedHtml>
      <turbo:source>https://goxpert.ru/2024/06/01/common/constructions/</turbo:source>
      <turbo:topic>Конструкции</turbo:topic>
      <title>Конструкции</title>
      <link>https://goxpert.ru/2024/06/01/common/constructions/</link>
      <pubDate>Sat, 01 Jun 2024 07:06:00 GMT</pubDate>
       
      <yandex:related type="infinity">
        
         
        <link url="https://goxpert.ru/2024/06/01/common/generics/">Предыдущая статья: Дженерики</link>
        <link url="https://goxpert.ru/2024/06/01/common/errors-panics/">Следующая статья: Ошибки / Panic</link>
        
        
      </yandex:related>
      
      
      <turbo:content><![CDATA[<h2 id="Гарантирует-ли-порядок-выполнения-конструкция-select-case"><a href="#Гарантирует-ли-порядок-выполнения-конструкция-select-case" class="headerlink" title="Гарантирует ли порядок выполнения конструкция select-case?"></a>Гарантирует ли порядок выполнения конструкция select-case?</h2><p>В Go, порядок выполнения операторов в конструкции select-case не гарантируется.</p><p>Когда у вас есть несколько операторов case в конструкции select, и они все готовы для выполнения (то есть каналы готовы для чтения/записи), Go выбирает один из них случайным образом.</p><p>Это означает, что вы не можете предсказать или контролировать, какой оператор case будет выполнен первым, если у вас есть несколько готовых для выполнения операторов case. Это помогает предотвратить блокировку и гарантировать, что все горутины имеют равные шансы на выполнение.</p><p>Источники: </p><ul><li><a href="https://advicemama.ru/primenenie-operatora-select-v-yazyke-golang-osnovnye-principy-i-sposoby-ispolzovaniya/">Advicemama</a></li></ul><h2 id="Как-выглядит-конструкция-утверждения-типа-switch"><a href="#Как-выглядит-конструкция-утверждения-типа-switch" class="headerlink" title="Как выглядит конструкция утверждения типа switch?"></a>Как выглядит конструкция утверждения типа switch?</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> v := i.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> Type2:</span><br><span class="line"><span class="keyword">case</span> SomeType:</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Нужно-ли-в-switch-case-проставлять-break"><a href="#Нужно-ли-в-switch-case-проставлять-break" class="headerlink" title="Нужно ли в switch-case проставлять break?"></a>Нужно ли в switch-case проставлять break?</h2><p>В языке программирования Go, вам не нужно использовать break в конструкции switch-case. В отличие от некоторых других языков программирования, таких как C++ или Java, каждый case в Go автоматически прерывается, и выполнение программы продолжается после конструкции switch-case. Это означает, что после каждого case не нужно явно указывать break.</p><p>Однако, если вы хотите, чтобы выполнение продолжилось и в следующем case, вы можете использовать ключевое слово fallthrough.</p><p>Надеюсь, это помогло вам лучше понять, как работает конструкция switch-case в Go! Если у вас есть еще вопросы, не стесняйтесь задавать.</p><p><img src="/images/golang_constructions.jpg" alt="Вот вам и конструкции"></p> ]]></turbo:content>
      
     </item>
    
    <item turbo="true">
      <turbo:extendedHtml>true</turbo:extendedHtml>
      <turbo:source>https://goxpert.ru/2024/06/01/common/errors-panics/</turbo:source>
      <turbo:topic>Ошибки / Panic</turbo:topic>
      <title>Ошибки / Panic</title>
      <link>https://goxpert.ru/2024/06/01/common/errors-panics/</link>
      <pubDate>Sat, 01 Jun 2024 07:05:00 GMT</pubDate>
       
      <yandex:related type="infinity">
        
         
        <link url="https://goxpert.ru/2024/06/01/common/constructions/">Предыдущая статья: Конструкции</link>
        <link url="https://goxpert.ru/2024/06/01/common/defer/">Следующая статья: Defer</link>
        
        
      </yandex:related>
      
      
      <turbo:content><![CDATA[<h2 id="Что-такое-паника"><a href="#Что-такое-паника" class="headerlink" title="Что такое паника?"></a>Что такое паника?</h2><p>Паника в программировании на Go обозначает серьезную ошибку, которая обычно приводит к немедленному завершению программы. Паника вызывает немедленное прекращение выполнения функции и начинает раскрутку стека Вы можете использовать функции defer и recover для перехвата и обработки паники.</p><h2 id="Что-используется-для-обработки-паники-Куда-нужно-помещать-recover"><a href="#Что-используется-для-обработки-паники-Куда-нужно-помещать-recover" class="headerlink" title="Что используется для обработки паники / Куда нужно помещать recover??"></a>Что используется для обработки паники / Куда нужно помещать recover??</h2><p>В Go для обработки паники используются функции <code>defer</code> и <code>recover</code>:</p><ul><li>Defer: Функция <code>defer</code> в Go позволяет отложить выполнение функции до того, как окружающая функция завершит свое выполнение. Это полезно для обработки ошибок и очистки ресурсов.</li><li>Recover: Функция <code>recover</code> используется для перехвата и обработки паник. Она должна вызываться внутри отложенной функции.</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">someFunction</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> r := <span class="built_in">recover</span>(); r != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;Recovered from&quot;</span>, r)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="comment">// Код, который может вызвать панику</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Какая-парадигма-в-Golang-с-точки-зрения-обработки-исключений-и-ошибок"><a href="#Какая-парадигма-в-Golang-с-точки-зрения-обработки-исключений-и-ошибок" class="headerlink" title="Какая парадигма в Golang с точки зрения обработки исключений и ошибок?"></a>Какая парадигма в Golang с точки зрения обработки исключений и ошибок?</h2><ul><li><p>Явная обработка ошибок: В Go ошибки считаются обычной частью работы программы и должны быть явно обработаны. Если функция может вызвать ошибку, она обычно возвращает значение ошибки в качестве одного из своих возвращаемых значений.</p></li><li><p>Нет исключений: В отличие от некоторых других языков, в Go нет встроенной поддержки исключений. Вместо этого функции возвращают ошибки, которые затем проверяются и обрабатываются.</p></li><li><p>Panic и recover: Go предоставляет функции <code>panic</code> и <code>recover</code> для обработки серьезных ошибок, которые обычно приводят к завершению программы. Однако эти функции обычно используются только в случае критических ошибок, и их использование для обычной обработки ошибок не рекомендуется.</p></li><li><p>Defer: Go также предоставляет ключевое слово <code>defer</code>, которое позволяет отложить выполнение функции до того, как окружающая функция завершит свое выполнение. Это полезно для обработки ошибок и очистки ресурсов.</p></li></ul><h2 id="Какие-есть-функции-для-оборачивания-и-сравнения-ошибок"><a href="#Какие-есть-функции-для-оборачивания-и-сравнения-ошибок" class="headerlink" title="Какие есть функции для оборачивания и сравнения ошибок?"></a>Какие есть функции для оборачивания и сравнения ошибок?</h2><p>В Go есть несколько функций, которые можно использовать для оборачивания и сравнения ошибок:</p><p>Оборачивание ошибок:</p><ul><li><p><code>fmt.Errorf</code>: Эта функция используется для создания новой ошибки, которая включает в себя сообщение об ошибке и другую ошибку в качестве причины. Начиная с Go 1.13, <code>fmt.Errorf</code> поддерживает оборачивание ошибок с помощью нового модификатора формата <code>%w</code>.</p></li><li><p>Сравнение ошибок:</p><ul><li><code>errors.Is</code>: Эта функция используется для проверки, является ли одна ошибка другой ошибкой. Она выполняет проверку на равенство ошибок и учитывает обернутые ошибки.</li><li><code>errors.As</code>: Эта функция используется для проверки, является ли ошибка или обернутая ошибка определенным типом. Если это так, она присваивает эту ошибку указанному значению.<br>Эти функции позволяют более эффективно работать с ошибками в Go, обеспечивая больше информации об ошибках и делая код более читаемым.</li></ul></li></ul><h2 id="Для-чего-используются-ошибки-а-для-чего-паника"><a href="#Для-чего-используются-ошибки-а-для-чего-паника" class="headerlink" title="Для чего используются ошибки, а для чего паника?"></a>Для чего используются ошибки, а для чего паника?</h2><p>В Go ошибки и паника используются для разных целей:</p><p>Ошибки:</p><ul><li>Ошибки в Go обычно используются для обработки ожидаемых проблем, которые могут возникнуть во время выполнения программы.</li><li>Если функция может вызвать ошибку, она обычно возвращает значение ошибки в качестве одного из своих возвращаемых значений.</li><li>Эти ошибки затем проверяются и обрабатываются явно в коде.</li></ul><p>Паника:</p><ul><li>Паника в Go обычно используется для обработки неожиданных ошибок, которые не могут быть обработаны или которые должны привести к немедленному завершению программы.</li><li>Паника вызывает немедленное прекращение выполнения функции и начинает раскрутку стека.</li><li>Вы можете использовать функции <code>defer</code> и <code>recover</code> для перехвата и обработки паники.</li><li>Важно отметить, что хотя паника может казаться похожей на исключения в некоторых других языках, в Go предпочитают явную обработку ошибок, и паника обычно используется только в случае серьезных ошибок.</li></ul><p><img src="/images/golang_panic.jpg" alt="Вот вам и паника!"></p> ]]></turbo:content>
      
     </item>
    
    <item turbo="true">
      <turbo:extendedHtml>true</turbo:extendedHtml>
      <turbo:source>https://goxpert.ru/2024/06/01/common/defer/</turbo:source>
      <turbo:topic>Defer</turbo:topic>
      <title>Defer</title>
      <link>https://goxpert.ru/2024/06/01/common/defer/</link>
      <pubDate>Sat, 01 Jun 2024 07:04:00 GMT</pubDate>
       
      <yandex:related type="infinity">
        
         
        <link url="https://goxpert.ru/2024/06/01/common/errors-panics/">Предыдущая статья: Ошибки / Panic</link>
        <link url="https://goxpert.ru/2024/06/01/common/package/">Следующая статья: Пакеты</link>
        
        
      </yandex:related>
      
      
      <turbo:content><![CDATA[<h2 id="Что-такое-defer-как-работает-зачем-нужен"><a href="#Что-такое-defer-как-работает-зачем-нужен" class="headerlink" title="Что такое defer, как работает, зачем нужен?"></a>Что такое defer, как работает, зачем нужен?</h2><p>defer - это ключевое слово в языке программирования Go, которое используется для определения функции, которая должна быть выполнена после возвращения текущей функции, но до возвращения вызвавшей ее функции. Это позволяет очистить ресурсы или выполнить другие задачи, которые необходимо выполнить после завершения основной работы функции.</p><p>Когда вызывается функция с ключевым словом defer, она не выполняется немедленно. Вместо этого она добавляется в список функций, которые будут выполняться в обратном порядке после возвращения текущей функции. Это означает, что последняя функция, вызванная с ключевым словом defer, будет выполнена первой после возврата текущей функции.</p><p>Ключевое слово defer полезно для обеспечения правильной очистки ресурсов, например, для закрытия файлов или сетевых соединений. Его также можно использовать для упрощения обработки ошибок, позволяя функции возвращать значение ошибки, а затем обрабатывать эту ошибку в одном месте после возврата функции.</p><p>Источники: </p><ul><li><a href="https://habr.com/ru/articles/492948/">Habr</a></li><li><a href="https://www.digitalocean.com/community/tutorials/understanding-defer-in-go-ru">DigitalOcean</a></li></ul><h2 id="Код-в-defer-выполняется-до-return-или-после"><a href="#Код-в-defer-выполняется-до-return-или-после" class="headerlink" title="Код в defer выполняется до return или после?"></a>Код в defer выполняется до return или после?</h2><p>Оператор defer в Go выполняется перед оператором return. Это позволяет удобно управлять ресурсами, такими как закрытие файлов или освобождение памяти, перед тем как функция завершится. </p><p>defer выполняется после того, как оператор return вычислит возвращаемые значения, но перед фактическим возвращением управления из функции.</p><p>Пример:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> fmt.Println(changePointer())</span><br><span class="line">    fmt.Println(<span class="string">&quot;Third&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">changePointer</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> fmt.Println(<span class="string">&quot;Second&quot;</span>)</span><br><span class="line">    fmt.Println(<span class="string">&quot;First&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Fourth&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Где-инициализируется-defer-в-стеке-или-куче"><a href="#Где-инициализируется-defer-в-стеке-или-куче" class="headerlink" title="Где инициализируется defer, в стеке или куче?"></a>Где инициализируется defer, в стеке или куче?</h2><p>Дефер-вызовы в Go инициализируются в стеке, а не в куче. Когда функция, содержащая дефер-вызовы, начинает выполняться, эти вызовы помещаются в стек. Затем, когда функция завершается, стек разворачивается, и дефер-вызовы выполняются в обратном порядке, в котором они были помещены в стек. Это позволяет гарантировать, что ресурсы, такие как файлы или соединения, будут освобождены в правильном порядке, даже если в функции произойдет ошибка.</p><h2 id="Задача-1"><a href="#Задача-1" class="headerlink" title="Задача #1"></a>Задача #1</h2><figure class="highlight go"><figcaption><span>title</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">tmp := <span class="number">101</span></span><br><span class="line">fmt.Println(tmp)</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(tmp)</span><br><span class="line">&#125;()</span><br><span class="line">tmp = <span class="number">202</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Этот код использует концепцию “замыкания”. Замыкание - это функция, которая имеет доступ к переменным из своего внешнего контекста.<br>В данном случае, анонимная функция, которая откладывается с помощью defer, имеет доступ к переменной tmp из внешнего контекста.</p><p>Когда вы вызываете <code>defer func() &#123; fmt.Println(tmp) &#125;()</code>, функция “захватывает” текущее значение tmp на момент вызова. </p><p>Однако в этом случае tmp является ссылкой на переменную во внешнем контексте. Это значит, что если tmp изменяется после вызова defer, то измененное значение будет использоваться в отложенной функции.</p><p>tmp сначала устанавливается в 101, затем выводится, затем откладывается функция, которая выводит tmp, и наконец tmp изменяется на 202.<br>Когда функция main завершается, отложенная функция вызывается и выводит текущее значение tmp, которое теперь равно 202.<br>В результате, вывод программы будет 101 и 202.</p><h2 id="Задача-2"><a href="#Задача-2" class="headerlink" title="Задача #2"></a>Задача #2</h2><figure class="highlight go"><figcaption><span>title</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">tmp := <span class="number">101</span></span><br><span class="line">fmt.Println(tmp)</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">(tmpx <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(tmpx)</span><br><span class="line">&#125;(tmp)</span><br><span class="line">tmp = <span class="number">202</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>В этом примере мы передаем tmp в отложенную функцию как аргумент. Это означает, что значение tmp будет скопировано в отложенную функцию, а не ссылаться на переменную во внешнем контексте.</p><p>В результате, вывод программы будет 101 и 101.</p><p><img src="/images/golang_defer.jpg" alt="Вот вам и defer"></p> ]]></turbo:content>
      
     </item>
    
    <item turbo="true">
      <turbo:extendedHtml>true</turbo:extendedHtml>
      <turbo:source>https://goxpert.ru/2024/06/01/common/package/</turbo:source>
      <turbo:topic>Пакеты</turbo:topic>
      <title>Пакеты</title>
      <link>https://goxpert.ru/2024/06/01/common/package/</link>
      <pubDate>Sat, 01 Jun 2024 07:03:00 GMT</pubDate>
       
      <yandex:related type="infinity">
        
         
        <link url="https://goxpert.ru/2024/06/01/common/defer/">Предыдущая статья: Defer</link>
        <link url="https://goxpert.ru/2024/06/01/overall-questions/">Следующая статья: Общие вопросы</link>
        
        
      </yandex:related>
      
      
      <turbo:content><![CDATA[<h2 id="Что-такое-пакет"><a href="#Что-такое-пакет" class="headerlink" title="Что такое пакет?"></a>Что такое пакет?</h2><p>В языке программирования Go, пакет (package) - это коллекция исходных файлов Go, которые находятся в одной и той же директории. Все файлы в одном пакете должны иметь одно и то же имя пакета в начале файла.</p><p>Пакеты в Go используются для организации и повторного использования кода. Они представляют собой удобный способ разделения кода на отдельные модули. Это позволяет определить пакет с нужной функциональностью один раз и затем использовать его многократно в различных программах.</p><p>В Go есть два типа пакетов: исполняемые (executable) и библиотеки (reusable). Исполняемые пакеты должны иметь имя <strong><code>main</code></strong> и содержать функцию <strong><code>main</code></strong>, которая является входной точкой в приложение. Все остальные пакеты являются библиотеками и не могут быть напрямую выполнены.</p><h2 id="Расскажи-про-папку-internal"><a href="#Расскажи-про-папку-internal" class="headerlink" title="Расскажи про папку internal"></a>Расскажи про папку internal</h2><p>В Go, папка <strong><code>internal</code></strong> используется для хранения кода, который не должен быть доступен за пределами текущего модуля. Это означает, что любой код, который находится в папке <strong><code>internal</code></strong> (или в подпапках этой папки), может быть импортирован и использован только внутри того же модуля. Это полезно, когда вы хотите скрыть определенные части вашего кода от внешнего мира, чтобы предотвратить его неправильное использование.</p><figure class="highlight plaintext"><figcaption><span>title</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">test</span><br><span class="line">├─ go.mod</span><br><span class="line">├─ internal</span><br><span class="line">│ └─ handler</span><br><span class="line">│   └─ opkg.go</span><br><span class="line">├─ main.go</span><br></pre></td></tr></table></figure><p><img src="/images/golang_packege.jpg" alt="Вот вам и пакет!"></p> ]]></turbo:content>
      
     </item>
    
    <item turbo="true">
      <turbo:extendedHtml>true</turbo:extendedHtml>
      <turbo:source>https://goxpert.ru/2024/06/01/overall-questions/</turbo:source>
      <turbo:topic>Общие вопросы</turbo:topic>
      <title>Общие вопросы</title>
      <link>https://goxpert.ru/2024/06/01/overall-questions/</link>
      <pubDate>Sat, 01 Jun 2024 07:02:00 GMT</pubDate>
       
      <yandex:related type="infinity">
        
         
        <link url="https://goxpert.ru/2024/06/01/common/package/">Предыдущая статья: Пакеты</link>
        <link url="https://goxpert.ru/2024/06/01/helloworld/">Следующая статья: С 1 Июня 2024!</link>
        
        
      </yandex:related>
      
      
      <turbo:content><![CDATA[<h2 id="Какие-технологические-преимущества-экосистемы-Go-вы-можете-назвать"><a href="#Какие-технологические-преимущества-экосистемы-Go-вы-можете-назвать" class="headerlink" title="Какие технологические преимущества экосистемы Go вы можете назвать?"></a>Какие технологические преимущества экосистемы Go вы можете назвать?</h2><p>В случае с экосистемой Go к потенциальным преимуществам можно отнести:</p><ul><li>Большое и активное сообщество разработчиков, которые вносят свой вклад в развитие языка Go и его экосистемы.</li><li>Богатый набор библиотек и инструментов, облегчающих разработку, тестирование и развертывание приложений на Go.</li><li>Совместимость с широким спектром платформ и систем, что делает его универсальным выбором для создания приложений.</li><li>Сильная поддержка конкурентного и параллельного программирования, что позволяет повысить производительность и масштабируемость приложений.</li><li>Упор на простоту и читабельность, что облегчает изучение и использование языка разработчиками и способствует развитию экосистемы.</li></ul><h2 id="Go-императивный-или-декларативный-А-в-чем-разница"><a href="#Go-императивный-или-декларативный-А-в-чем-разница" class="headerlink" title="Go - императивный или декларативный? А в чем разница?"></a>Go - императивный или декларативный? А в чем разница?</h2><p>Go - императивный язык программирования. Это означает, что в нем используются инструкции, которые описывают, как выполнять задачу. В декларативных языках программирования, например, SQL, описывается, что должно быть сделано, а не как это сделать.</p><h2 id="Какие-особенности-Go-вы-можете-назвать"><a href="#Какие-особенности-Go-вы-можете-назвать" class="headerlink" title="Какие особенности Go вы можете назвать?"></a>Какие особенности Go вы можете назвать?</h2><ul><li>Статическая типизация</li><li>Сборка мусора</li><li>Конкурентность</li><li>Параллелизм</li><li>Отсутствие исключений</li><li>Строгая типизация</li><li>Строгая проверка ошибок</li></ul><h2 id="Почему-треды-в-Go-легковесные"><a href="#Почему-треды-в-Go-легковесные" class="headerlink" title="Почему треды в Go - легковесные"></a>Почему треды в Go - легковесные</h2><p>В Go горутины - это легковесные потоки, управляемые средой выполнения Go. Они более легковесны, чем потоки операционной системы, потому что занимают меньше места в памяти, обычно около 2 килобайт, по сравнению с памятью потока операционной системы, которая может составлять несколько мегабайт. Такой меньший объем памяти позволяет среде выполнения Go создавать большое количество горутин, часто тысячи или даже миллионы, не исчерпывая системных ресурсов.</p><p>Кроме того, среда выполнения Go использует планировщик, чтобы мультиплексировать горутины на меньшее число потоков операционной системы, что позволяет снизить накладные расходы на создание и управление потоками. Планировщик также может выполнять контекстные переключения между горутинами без участия операционной системы, что может быть быстрее, чем полное контекстное переключение между потоками операционной системы.</p><p>В целом, сочетание меньшего объема памяти и планировщика пользовательского пространства делает горутины легким и эффективным механизмом для параллельного выполнения в программах на Go.</p><h2 id="Какие-средства-обобщенного-программирования-есть-в-Go"><a href="#Какие-средства-обобщенного-программирования-есть-в-Go" class="headerlink" title="Какие средства обобщенного программирования есть в Go?"></a>Какие средства обобщенного программирования есть в Go?</h2><p>В Go 1.18 появилась поддержка обобщенного программирования. Обобщенное программирование - это способность писать функции и типы, которые работают с любыми типами данных, а не только с конкретными типами данных. В Go 1.18 обобщенное программирование реализовано с помощью параметризованных типов и функций.</p><h2 id="Какие-средства-метапрограммирования-есть-в-Go"><a href="#Какие-средства-метапрограммирования-есть-в-Go" class="headerlink" title="Какие средства метапрограммирования есть в Go?"></a>Какие средства метапрограммирования есть в Go?</h2><p>В Go нет средств метапрограммирования, таких как макросы, шаблоны. Вместо этого Go предоставляет мощную систему интерфейсов, которая позволяет писать гибкий и расширяемый код, который может быть легко адаптирован к различным типам данных.</p><h2 id="Какая-сортировка-используется-в-Golang"><a href="#Какая-сортировка-используется-в-Golang" class="headerlink" title="Какая сортировка используется в Golang?"></a>Какая сортировка используется в Golang?</h2><p>В Go используется алгоритм сортировки “Quicksort”, который является эффективным алгоритмом сортировки с асимптотической сложностью O(n log n). Этот алгоритм используется в стандартной библиотеке “sort” для сортировки слайсов и пользовательских коллекций данных.</p><h2 id="Какая-кодировка-используется-в-Golang"><a href="#Какая-кодировка-используется-в-Golang" class="headerlink" title="Какая кодировка используется в Golang?"></a>Какая кодировка используется в Golang?</h2><p>Go поддерживает UTF-8 кодировку по умолчанию для всех строковых типов. Это означает, что вы можете безопасно использовать Unicode символы в строках в Go. Библиотека “unicode/utf8” предоставляет функции для работы с UTF-8 кодированными строками.</p><h2 id="Можно-ли-в-Golang-создать-статический-метод"><a href="#Можно-ли-в-Golang-создать-статический-метод" class="headerlink" title="Можно ли в Golang создать статический метод?"></a>Можно ли в Golang создать статический метод?</h2><p>В Go нет классов и, следовательно, нет статических методов в традиционном понимании этого термина, как в языках, таких как Java или C++. Однако, вы можете создать функции, которые привязаны к определенному типу данных, что близко к понятию статического метода.</p><p>Вот пример:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyType <span class="keyword">struct</span> &#123;</span><br><span class="line">    value <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t MyType)</span> <span class="title">StaticMethod</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> t.value * <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>В этом примере <code>StaticMethod</code> является функцией, которая привязана к типу <code>MyType</code>. Вы можете вызвать эту функцию на экземпляре <code>MyType</code>.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t := MyType&#123;value: <span class="number">5</span>&#125;</span><br><span class="line">result := t.StaticMethod() <span class="comment">// result is 10</span></span><br></pre></td></tr></table></figure><p>Это не совсем то же самое, что статический метод в языках с классами, но это ближайший аналог в Go.</p><p><img src="/images/common_questions.jpg" alt="С первым полетом!"></p> ]]></turbo:content>
      
     </item>
    
    <item turbo="true">
      <turbo:extendedHtml>true</turbo:extendedHtml>
      <turbo:source>https://goxpert.ru/2024/06/01/helloworld/</turbo:source>
      <turbo:topic>С 1 Июня 2024!</turbo:topic>
      <title>С 1 Июня 2024!</title>
      <link>https://goxpert.ru/2024/06/01/helloworld/</link>
      <pubDate>Sat, 01 Jun 2024 07:00:00 GMT</pubDate>
       
      <yandex:related type="infinity">
        
        
         
        <link url="https://goxpert.ru/2024/06/01/overall-questions/">Предыдущая статья: Общие вопросы</link>
        
      </yandex:related>
      
      
      <turbo:content><![CDATA[<p>Добрый день! Сегодня родился сайт GoXpert. </p><p>Для чего нужен этот сайт:</p><ul><li>Во-первых, для меня. Да, меня зовут Дмитрий Сигаев. Это сайт, на мой взгляд, поможет мне структурировать свои знания в разных областях, но в основном в экосистеме GO. Я много, что умею, но не могу в нужный для меня момент вынуть из своей головы нужной информации. Данный сайт — это так называемое хранилище моего опыта и якорей для быстрой настройки кратковременной памяти :) </li><li>Во-вторых, если это полезно для меня, то, на мой взгляд, найдется тот, кому это сайт тоже поможет в чем-то разобраться…</li><li>В-третьих, хочу выразить благодарность Сергею Артамонову. Спасибо за второй шанс и последствие в виде данного сайта. Надеюсь, быть его падаваном и соавтором публикаций на данном сайта.</li></ul><p>Ладно, не будем терять времени… поехали…</p><p>Let’s GO!</p><p><img src="/images/lets_go_with_goxpert.jpg" alt="С первым полетом!"></p><div id="aplayer-LMBIqxFh" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;"><pre class="aplayer-lrc-content">Небо мой дом...</pre></div><script>var ap = new APlayer({element: document.getElementById("aplayer-LMBIqxFh"),narrow: false,autoplay: false,showlrc: 2,music: {title: "Лови Момент",author: "Machete",url: "/audio/MacheteTakeIt.mp3",pic: "",}});window.aplayers || (window.aplayers = []);window.aplayers.push(ap);</script><p><img src="/images/okko_2024_05.jpg" alt="Цель есть и она за окном... возможностей"></p> ]]></turbo:content>
      
     </item>
    
  </channel>
</rss>
