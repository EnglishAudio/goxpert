<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>GoXpert.ru</title>
    <link>https://goxpert.ru/</link>
    
    <atom:link href="https://goxpert.ru/rss.xml" rel="self" type="application/rss+xml"/>
    
    <description>Секреты Golang. Архитектура и дизайн приложений на GO. Всё о GO изнутри</description>
    <pubDate>Sat, 01 Jun 2024 12:29:15 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Пакеты</title>
      <link>https://goxpert.ru/2024/06/01/common/package/</link>
      <guid>https://goxpert.ru/2024/06/01/common/package/</guid>
      <pubDate>Sat, 01 Jun 2024 07:03:00 GMT</pubDate>
      
      <description>Вопросы по пакетам в Golang</description>
      
      
      
      <content:encoded><![CDATA[<!-- feed_rem_st --><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- feed_rem_end --><h2 id="Что-такое-пакет"><a href="#Что-такое-пакет" class="headerlink" title="Что такое пакет?"></a>Что такое пакет?</h2><p>В языке программирования Go, пакет (package) - это коллекция исходных файлов Go, которые находятся в одной и той же директории. Все файлы в одном пакете должны иметь одно и то же имя пакета в начале файла.</p><p>Пакеты в Go используются для организации и повторного использования кода. Они представляют собой удобный способ разделения кода на отдельные модули. Это позволяет определить пакет с нужной функциональностью один раз и затем использовать его многократно в различных программах.</p><p>В Go есть два типа пакетов: исполняемые (executable) и библиотеки (reusable). Исполняемые пакеты должны иметь имя <strong><code>main</code></strong> и содержать функцию <strong><code>main</code></strong>, которая является входной точкой в приложение. Все остальные пакеты являются библиотеками и не могут быть напрямую выполнены.</p><h2 id="Расскажи-про-папку-internal"><a href="#Расскажи-про-папку-internal" class="headerlink" title="Расскажи про папку internal"></a>Расскажи про папку internal</h2><p>В Go, папка <strong><code>internal</code></strong> используется для хранения кода, который не должен быть доступен за пределами текущего модуля. Это означает, что любой код, который находится в папке <strong><code>internal</code></strong> (или в подпапках этой папки), может быть импортирован и использован только внутри того же модуля. Это полезно, когда вы хотите скрыть определенные части вашего кода от внешнего мира, чтобы предотвратить его неправильное использование.</p><figure class="highlight plaintext"><figcaption><span>title</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">test</span><br><span class="line">├─ go.mod</span><br><span class="line">├─ internal</span><br><span class="line">│ └─ handler</span><br><span class="line">│   └─ opkg.go</span><br><span class="line">├─ main.go</span><br></pre></td></tr></table></figure><p><img src="/images/golang_packege.jpg" alt="Вот вам и пакет!"></p>]]></content:encoded>
      
      
      <category domain="https://goxpert.ru/categories/Golang/">Golang</category>
      
      <category domain="https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/">Старт</category>
      
      <category domain="https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/">Вопрос-Ответ</category>
      
      
      <category domain="https://goxpert.ru/tags/Golang-Q-A/">Golang, Q&amp;A</category>
      
      
      <comments>https://goxpert.ru/2024/06/01/common/package/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Общие вопросы</title>
      <link>https://goxpert.ru/2024/06/01/overall-questions/</link>
      <guid>https://goxpert.ru/2024/06/01/overall-questions/</guid>
      <pubDate>Sat, 01 Jun 2024 07:02:00 GMT</pubDate>
      
      <description>Вопросы по Golang не относящиеся к конкретным темам</description>
      
      
      
      <content:encoded><![CDATA[<!-- feed_rem_st --><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- feed_rem_end --><h2 id="Какие-технологические-преимущества-экосистемы-Go-вы-можете-назвать"><a href="#Какие-технологические-преимущества-экосистемы-Go-вы-можете-назвать" class="headerlink" title="Какие технологические преимущества экосистемы Go вы можете назвать?"></a>Какие технологические преимущества экосистемы Go вы можете назвать?</h2><p>В случае с экосистемой Go к потенциальным преимуществам можно отнести:</p><ul><li>Большое и активное сообщество разработчиков, которые вносят свой вклад в развитие языка Go и его экосистемы.</li><li>Богатый набор библиотек и инструментов, облегчающих разработку, тестирование и развертывание приложений на Go.</li><li>Совместимость с широким спектром платформ и систем, что делает его универсальным выбором для создания приложений.</li><li>Сильная поддержка конкурентного и параллельного программирования, что позволяет повысить производительность и масштабируемость приложений.</li><li>Упор на простоту и читабельность, что облегчает изучение и использование языка разработчиками и способствует развитию экосистемы.</li></ul><h2 id="Go-императивный-или-декларативный-А-в-чем-разница"><a href="#Go-императивный-или-декларативный-А-в-чем-разница" class="headerlink" title="Go - императивный или декларативный? А в чем разница?"></a>Go - императивный или декларативный? А в чем разница?</h2><p>Go - императивный язык программирования. Это означает, что в нем используются инструкции, которые описывают, как выполнять задачу. В декларативных языках программирования, например, SQL, описывается, что должно быть сделано, а не как это сделать.</p><h2 id="Какие-особенности-Go-вы-можете-назвать"><a href="#Какие-особенности-Go-вы-можете-назвать" class="headerlink" title="Какие особенности Go вы можете назвать?"></a>Какие особенности Go вы можете назвать?</h2><ul><li>Статическая типизация</li><li>Сборка мусора</li><li>Конкурентность</li><li>Параллелизм</li><li>Отсутствие исключений</li><li>Строгая типизация</li><li>Строгая проверка ошибок</li></ul><h2 id="Почему-треды-в-Go-легковесные"><a href="#Почему-треды-в-Go-легковесные" class="headerlink" title="Почему треды в Go - легковесные"></a>Почему треды в Go - легковесные</h2><p>В Go горутины - это легковесные потоки, управляемые средой выполнения Go. Они более легковесны, чем потоки операционной системы, потому что занимают меньше места в памяти, обычно около 2 килобайт, по сравнению с памятью потока операционной системы, которая может составлять несколько мегабайт. Такой меньший объем памяти позволяет среде выполнения Go создавать большое количество горутин, часто тысячи или даже миллионы, не исчерпывая системных ресурсов.</p><p>Кроме того, среда выполнения Go использует планировщик, чтобы мультиплексировать горутины на меньшее число потоков операционной системы, что позволяет снизить накладные расходы на создание и управление потоками. Планировщик также может выполнять контекстные переключения между горутинами без участия операционной системы, что может быть быстрее, чем полное контекстное переключение между потоками операционной системы.</p><p>В целом, сочетание меньшего объема памяти и планировщика пользовательского пространства делает горутины легким и эффективным механизмом для параллельного выполнения в программах на Go.</p><h2 id="Какие-средства-обобщенного-программирования-есть-в-Go"><a href="#Какие-средства-обобщенного-программирования-есть-в-Go" class="headerlink" title="Какие средства обобщенного программирования есть в Go?"></a>Какие средства обобщенного программирования есть в Go?</h2><p>В Go 1.18 появилась поддержка обобщенного программирования. Обобщенное программирование - это способность писать функции и типы, которые работают с любыми типами данных, а не только с конкретными типами данных. В Go 1.18 обобщенное программирование реализовано с помощью параметризованных типов и функций.</p><h2 id="Какие-средства-метапрограммирования-есть-в-Go"><a href="#Какие-средства-метапрограммирования-есть-в-Go" class="headerlink" title="Какие средства метапрограммирования есть в Go?"></a>Какие средства метапрограммирования есть в Go?</h2><p>В Go нет средств метапрограммирования, таких как макросы, шаблоны. Вместо этого Go предоставляет мощную систему интерфейсов, которая позволяет писать гибкий и расширяемый код, который может быть легко адаптирован к различным типам данных.</p><h2 id="Какая-сортировка-используется-в-Golang"><a href="#Какая-сортировка-используется-в-Golang" class="headerlink" title="Какая сортировка используется в Golang?"></a>Какая сортировка используется в Golang?</h2><p>В Go используется алгоритм сортировки “Quicksort”, который является эффективным алгоритмом сортировки с асимптотической сложностью O(n log n). Этот алгоритм используется в стандартной библиотеке “sort” для сортировки слайсов и пользовательских коллекций данных.</p><h2 id="Какая-кодировка-используется-в-Golang"><a href="#Какая-кодировка-используется-в-Golang" class="headerlink" title="Какая кодировка используется в Golang?"></a>Какая кодировка используется в Golang?</h2><p>Go поддерживает UTF-8 кодировку по умолчанию для всех строковых типов. Это означает, что вы можете безопасно использовать Unicode символы в строках в Go. Библиотека “unicode/utf8” предоставляет функции для работы с UTF-8 кодированными строками.</p><h2 id="Можно-ли-в-Golang-создать-статический-метод"><a href="#Можно-ли-в-Golang-создать-статический-метод" class="headerlink" title="Можно ли в Golang создать статический метод?"></a>Можно ли в Golang создать статический метод?</h2><p>В Go нет классов и, следовательно, нет статических методов в традиционном понимании этого термина, как в языках, таких как Java или C++. Однако, вы можете создать функции, которые привязаны к определенному типу данных, что близко к понятию статического метода.</p><p>Вот пример:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyType <span class="keyword">struct</span> &#123;</span><br><span class="line">    value <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t MyType)</span> <span class="title">StaticMethod</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> t.value * <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>В этом примере <code>StaticMethod</code> является функцией, которая привязана к типу <code>MyType</code>. Вы можете вызвать эту функцию на экземпляре <code>MyType</code>.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t := MyType&#123;value: <span class="number">5</span>&#125;</span><br><span class="line">result := t.StaticMethod() <span class="comment">// result is 10</span></span><br></pre></td></tr></table></figure><p>Это не совсем то же самое, что статический метод в языках с классами, но это ближайший аналог в Go.</p><p><img src="/images/common_questions.jpg" alt="С первым полетом!"></p>]]></content:encoded>
      
      
      <category domain="https://goxpert.ru/categories/Golang/">Golang</category>
      
      <category domain="https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/">Старт</category>
      
      <category domain="https://goxpert.ru/categories/%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81-%D0%9E%D1%82%D0%B2%D0%B5%D1%82/">Вопрос-Ответ</category>
      
      
      <category domain="https://goxpert.ru/tags/Golang-Q-A/">Golang, Q&amp;A</category>
      
      
      <comments>https://goxpert.ru/2024/06/01/overall-questions/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>С 1 Июня 2024!</title>
      <link>https://goxpert.ru/2024/06/01/helloworld/</link>
      <guid>https://goxpert.ru/2024/06/01/helloworld/</guid>
      <pubDate>Sat, 01 Jun 2024 07:00:00 GMT</pubDate>
      
        
        
      <description>&lt;!-- feed_rem_st --&gt;&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/s</description>
        
      
      
      
      <content:encoded><![CDATA[<!-- feed_rem_st --><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- feed_rem_end --><p>Добрый день! Сегодня родился сайт GoXpert. </p><p>Для чего нужен этот сайт:</p><ul><li>Во-первых, для меня. Да, меня зовут Дмитрий Сигаев. Это сайт, на мой взгляд, поможет мне структурировать свои знания в разных областях, но в основном в экосистеме GO. Я много, что умею, но не могу в нужный для меня момент вынуть из своей головы нужной информации. Данный сайт — это так называемое хранилище моего опыта и якорей для быстрой настройки кратковременной памяти :) </li><li>Во-вторых, если это полезно для меня, то, на мой взгляд, найдется тот, кому это сайт тоже поможет в чем-то разобраться…</li><li>В-третьих, хочу выразить благодарность Сергею Артамонову. Спасибо за второй шанс и последствие в виде данного сайта. Надеюсь, быть его падаваном и соавтором публикаций на данном сайта.</li></ul><p>Ладно, не будем терять времени… поехали…</p><p>Let’s GO!</p><p><img src="/images/lets_go_with_goxpert.jpg" alt="С первым полетом!"></p>]]></content:encoded>
      
      
      <category domain="https://goxpert.ru/categories/Golang/">Golang</category>
      
      <category domain="https://goxpert.ru/categories/Golang/%D0%A1%D1%82%D0%B0%D1%80%D1%82/">Старт</category>
      
      
      <category domain="https://goxpert.ru/tags/Golang/">Golang</category>
      
      
      <comments>https://goxpert.ru/2024/06/01/helloworld/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>